##
## Actual settings
##

[*.cs]
# File scoped namespaces reduce indentation are just a good practice
csharp_style_namespace_declarations = file_scoped:warning

# Using directive placement
csharp_using_directive_placement = outside_namespace:error

# Disallow multiple empty lines in a row
dotnet_style_allow_multiple_blank_lines_experimental = false:warning

# Tuple names are a good practice for clarity
dotnet_style_explicit_tuple_names = true:warning

# Conditionals for clarity, not enforced
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

##
## Visual studio code analysis
##

# Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = None

# Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = Warning

# Do not expose generic lists - Why not, it's performant
dotnet_diagnostic.CA1002.severity = None

# Use generic event handler instances
dotnet_diagnostic.CA1003.severity = Warning

# Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = Warning

# Enums should have zero value - Not always
dotnet_diagnostic.CA1008.severity = None

# Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = Warning

# Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = Error

# Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = Error

# Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1016.severity = Error

# Mark assemblies with ComVisibleAttribute
dotnet_diagnostic.CA1017.severity = None

# Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = Error

# Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = Error

# Avoid out parameters
dotnet_diagnostic.CA1021.severity = None

# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = Warning

# Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = Error

# Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = Error

# Use events where appropriate
dotnet_diagnostic.CA1030.severity = Warning

# Do not catch general exception types - Sometimes I need to catchall and can't fall back out of scope
dotnet_diagnostic.CA1031.severity = None

# Implement standard exception constructors - I want specific exceptions with different constructors too
dotnet_diagnostic.CA1032.severity = None

# Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = Warning

# Nested types should not be visible
dotnet_diagnostic.CA1034.severity = Error

# Override methods on comparable types
dotnet_diagnostic.CA1036.severity = Error

# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = Error

# Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = Warning

# Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = Warning

# Properties should not be write only
dotnet_diagnostic.CA1044.severity = Error

# Do not pass types by reference - but I want to
dotnet_diagnostic.CA1045.severity = None

# Do not overload operator equals on reference types
dotnet_diagnostic.CA1046.severity = Warning

# Do not declare protected members in sealed types
dotnet_diagnostic.CA1047.severity = Error

# Declare types in namespaces
dotnet_diagnostic.CA1050.severity = Error

# Do not declare visible instance fields - disabled because protected fields count
dotnet_diagnostic.CA1051.severity = None

# Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = Error

# Static holder types should not have default constructors
dotnet_diagnostic.CA1053.severity = Error

# URI parameters should not be strings
dotnet_diagnostic.CA1054.severity = Warning

# URI return values should not be strings
dotnet_diagnostic.CA1055.severity = Warning

# URI properties should not be strings
dotnet_diagnostic.CA1056.severity = Warning

# Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = Error

# Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1060.severity = Error

# Do not hide base class methods
dotnet_diagnostic.CA1061.severity = Error

# Validate arguments of public methods - Too much work
dotnet_diagnostic.CA1062.severity = None

# Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = Warning

# Exceptions should be public
dotnet_diagnostic.CA1064.severity = Warning

# Do not raise exceptions in unexpected locations - Sometimes needed
dotnet_diagnostic.CA1065.severity = None

# Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1066.severity = Error

# Override Equals when implementing IEquatable
dotnet_diagnostic.CA1067.severity = Error

# CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = Warning

# Enums should not have duplicate values
dotnet_diagnostic.CA1069.severity = Error

# Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = Error

# Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = Error

# Do not pass literals as localized parameters - Sometimes I just want to Console.Writeline
dotnet_diagnostic.CA1303.severity = None

# Specify CultureInfo
dotnet_diagnostic.CA1304.severity = Warning

# Specify IFormatProvider - Too much clutter
dotnet_diagnostic.CA1305.severity = None

# Specify StringComparison for clarity - Too much clutter
dotnet_diagnostic.CA1307.severity = None

# Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = Error

# Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = Warning

# Specify StringComparison for correctness - Too much clutter
dotnet_diagnostic.CA1310.severity = None

# Specify a culture or use an invariant version
dotnet_diagnostic.CA1311.severity = Warning

# Specify marshalling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = Error

# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = Warning

# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = Warning

# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = Warning

# Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = Warning

# Use nameof in place of string
dotnet_diagnostic.CA1507.severity = Warning

# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = Warning

# Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = Warning

# Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = Warning

# Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = Warning

# Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = Warning

# Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = Warning

# Consider making public types internal
dotnet_diagnostic.CA1515.severity = Suggestion

# Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = Error

# Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = None

# Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = Error

# Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = Warning

# Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = Warning

# Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = Warning

# Events should not have before or after prefix
dotnet_diagnostic.CA1713.severity = Warning

# Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = Warning

# Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = Warning

# Identifiers should not match keywords - I want to name a repository method "Get"
dotnet_diagnostic.CA1716.severity = None

# Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = Warning

# Identifiers should not contain type names - Too restrictive
dotnet_diagnostic.CA1720.severity = None

# Property names should not match get methods - Too restrictive
dotnet_diagnostic.CA1721.severity = None

# Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = Warning

# Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = Warning

# Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = Warning

# Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = Warning

# Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = Warning

# Do not ignore method results
dotnet_diagnostic.CA1806.severity = Warning

# Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = Warning

# Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = Warning

# Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = Warning

# Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = Warning

# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = Warning

# Properties should not return arrays - Sometimes necessary
dotnet_diagnostic.CA1819.severity = None

# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = Warning

# Remove empty finalizers
dotnet_diagnostic.CA1821.severity = Error

# Mark members as static
dotnet_diagnostic.CA1822.severity = Warning

# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = Warning

# Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = Warning

# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = Suggestion

# Do not use Count()/LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = Suggestion

# Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = Suggestion

# Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = Warning

# Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = Warning

# Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = Warning

# Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = Warning

# Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = Warning

# Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = Suggestion

# Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = Warning

# Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = Warning

# Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1837.severity = Warning

# Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = Error

# Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1839.severity = Error

# Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1840.severity = Error

# Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = Warning

# Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = Warning

# Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = Warning

# Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = Warning

# Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = Warning

# Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = Warning

# Use String.Contains(char) instead of String.Contains(string) with single characters
dotnet_diagnostic.CA1847.severity = Error

# Use the LoggerMessage delegates - Smart, but some other time
dotnet_diagnostic.CA1848.severity = None

# Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = Warning

# Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1850.severity = Warning

# Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = Warning

# Seal internal types
dotnet_diagnostic.CA1852.severity = Warning

# Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1853.severity = Warning

# Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1854.severity = Warning

# Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1855.severity = Error

# Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1856.severity = Error

# The parameter expects a constant for optimal performance
dotnet_diagnostic.CA1857.severity = Warning

# Use StartsWith instead of IndexOf
dotnet_diagnostic.CA1858.severity = Warning

# Use concrete types when possible for improved performance
dotnet_diagnostic.CA1859.severity = Warning

# Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = Warning

# Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = Warning

# Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1862.severity = Warning

# Use 'CompositeFormat'
dotnet_diagnostic.CA1863.severity = Warning

# Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1864.severity = Warning

# Use 'string.Method(char)' instead of 'string.Method(string)' for string with single char
dotnet_diagnostic.CA1865.severity = Warning
dotnet_diagnostic.CA1866.severity = Warning
dotnet_diagnostic.CA1867.severity = Warning

# Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA1868.severity = Warning

# Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA1869.severity = Warning

# Use a cached 'SearchValues' instance
dotnet_diagnostic.CA1870.severity = Warning

# Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1871.severity = Warning

# Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
dotnet_diagnostic.CA1872.severity = Warning

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = Warning

# Do not directly await a Task
dotnet_diagnostic.CA2007.severity = Warning

# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = Warning

# Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = Warning

# Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = Warning

# Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = Error

# Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = Error

# Parameter count mismatch
dotnet_diagnostic.CA2017.severity = Error

# Don't call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2021.severity = Error

##
## Visual studio IDE
##

# Simplify name
dotnet_diagnostic.IDE0001.severity = Suggestion

# Simplify member access
dotnet_diagnostic.IDE0002.severity = Suggestion

# No "this" if not needed
dotnet_diagnostic.IDE0003.severity = Suggestion

# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = Suggestion

# Unnecessary imports/usings are error-worthy
dotnet_diagnostic.IDE0005.severity = Error

# Var instead of type
dotnet_diagnostic.IDE0007.severity = Suggestion

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = Warning

# Add braces
dotnet_diagnostic.IDE0011.severity = Warning

# Use throw expression
dotnet_diagnostic.IDE0016.severity = Suggestion

# Use object initializers
dotnet_diagnostic.IDE0017.severity = Suggestion

# Inline variable declaration
dotnet_diagnostic.IDE0018.severity = Suggestion

# Pattern matching
dotnet_diagnostic.IDE0019.severity = Suggestion

# Collection initialization simplification needs not be suggested.
dotnet_diagnostic.IDE0028.severity = Suggestion

# Null check can be simplified
dotnet_diagnostic.IDE0029.severity = Suggestion

# Null check can be simplified
dotnet_diagnostic.IDE0030.severity = Suggestion

# Null propagation
dotnet_diagnostic.IDE0031.severity = Suggestion

# Require explicit tuple names
dotnet_diagnostic.IDE0033.severity = Error

# Remove unreachable code
dotnet_diagnostic.IDE0035.severity = Suggestion

# Order accessibility modifiers
dotnet_diagnostic.IDE0036.severity = Warning

# Require accessibility modifiers
dotnet_diagnostic.IDE0040.severity = Error

# Prefer is null
dotnet_diagnostic.IDE0041.severity = Suggestion

# Prefer variable deconstruction in declaration
dotnet_diagnostic.IDE0042.severity = Suggestion

# Prefer readonly
dotnet_diagnostic.IDE0044.severity = Suggestion

# Ternary operator suggestions are okay
dotnet_diagnostic.IDE0045.severity = Suggestion

# Ternary operator suggestions are okay
dotnet_diagnostic.IDE0046.severity = Suggestion

# Prefer tuple over anonymous type
dotnet_diagnostic.IDE0050.severity = Warning

# Remove unused private member
dotnet_diagnostic.IDE0051.severity = Warning

# Remove unread private member
dotnet_diagnostic.IDE0052.severity = Warning

# Prefer compound assignment
dotnet_diagnostic.IDE0054.severity = Suggestion

# Use index operator
dotnet_diagnostic.IDE0056.severity = Suggestion

# Use range operator
dotnet_diagnostic.IDE0057.severity = Suggestion

# Struct fields should be writable
dotnet_diagnostic.IDE0064.severity = Warning

# Usings outside namespace
dotnet_diagnostic.IDE0065.severity = Error

# Switch expression suggestions are fine.
dotnet_diagnostic.IDE0066.severity = None

# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = Warning

# Prefer compound assignment
dotnet_diagnostic.IDE0074.severity = Suggestion

# Use pattern matching
dotnet_diagnostic.IDE0078.severity = Suggestion

# Prefer nameof instead of typeof().Name
dotnet_diagnostic.IDE0082.severity = Suggestion

# Discard unnecessary equals operator
dotnet_diagnostic.IDE0100.severity = Warning

# Discard unnecessary discard operator
dotnet_diagnostic.IDE0110.severity = Warning

# Simplify LINQ
dotnet_diagnostic.IDE0120.severity = Warning

# Simplify LINQ
dotnet_diagnostic.IDE0121.severity = Warning

# Namespace must match folder structure
dotnet_diagnostic.IDE0130.severity = Error

# Namespaces should be per-file
dotnet_diagnostic.IDE0161.severity = Error

# Prefer readonly
dotnet_diagnostic.IDE0250.severity = Suggestion

# Prefer readonly
dotnet_diagnostic.IDE0251.severity = Suggestion

# Use pattern matching
dotnet_diagnostic.IDE0260.severity = Suggestion

# Null check can be simplified
dotnet_diagnostic.IDE0270.severity = Suggestion

# Use nameof()
dotnet_diagnostic.IDE0280.severity = Suggestion

# Disagree about clarity of primary constructor
dotnet_diagnostic.IDE0290.severity = None

##
## StyleCop.Analyzers
##

# XML comment analysis is disabled due to project configuration
dotnet_diagnostic.SA0001.severity = None

# Closing parenthesis should not be preceded by a space
dotnet_diagnostic.SA1009.severity = Warning

# Square brackets preceded by space is fine.
dotnet_diagnostic.SA1010.severity = None

# Prefix local calls with this
dotnet_diagnostic.SA1101.severity = None

# Put constructor initializers on their own line
dotnet_diagnostic.SA1128.severity = None

# Using directive should appear within a namespace declaration
dotnet_diagnostic.SA1200.severity = None

# Static members should come before non-static members
dotnet_diagnostic.SA1204.severity = Warning

# Fields should begin with a lowercase letter
dotnet_diagnostic.SA1306.severity = None
    
# Field '_blah' should not begin with an underscore
dotnet_diagnostic.SA1309.severity = None

# Fields can be protected
dotnet_diagnostic.SA1401.severity = None

# Arithmetic operation precedence is self-explanatory
dotnet_diagnostic.SA1407.severity = None

# Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1413.severity = None

# Usings do not need blank lines in-between
dotnet_diagnostic.SA1516.severity = None

# Enumeration items do not need to be documented
dotnet_diagnostic.SA1602.severity = None

# Allow properties to contain any kind of documentation line.
dotnet_diagnostic.SA1623.severity = None

# No need to always set header
dotnet_diagnostic.SA1633.severity = None

##
## SonarAnalyzers.CSharp
##

# Remove this commented out code
dotnet_diagnostic.S125.severity = Suggestion

# There should be no need to always merge nested ifs
dotnet_diagnostic.S1066.severity = Suggestion

# LINQ suggester is quite aggressive, but for a reason
dotnet_diagnostic.S3267.severity = Warning

# LINQ suggester is too aggressive, but for a reason
dotnet_diagnostic.S3358.severity = Warning

# Please provide assembly versions
dotnet_diagnostic.S3904.severity = Warning

# Pascalcase in placeholders looks stupid
dotnet_diagnostic.S6678.severity = None

##
## Orleans
##

# I do not want to use Orleans binary serialization. Clarity over speed here.
dotnet_diagnostic.ORLEANS0005.severity = None

# No alias nagging please
dotnet_diagnostic.ORLEANS0010.severity = None
