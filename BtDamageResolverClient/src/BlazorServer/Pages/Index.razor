@page "/"
@using SevenZip.Compression.LZMA
@using Microsoft.AspNetCore.SignalR.Client
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Communication
@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Api.ClientInterface.Events
@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Api.Options
@inject CommonData _commonData
@inject LocalStorage _localStorage
@inject NavigationManager _navigationManager
@inject ResolverCommunicator _resolverCommunicator
@inject UserStateController _userStateController
@inject VisualStyleController _visualStyleController
@implements IDisposable

<div class="resolver_div_errormessage">
    <verbatim>
        @_errorMessage
    </verbatim>
</div>

<div style="@VisualStyleController.HideElement(_userStateController.ConnectedToGame)">
    <FormServer @key="_userStateController.PlayerName" @ref="_formServer"></FormServer>
</div>

<ContainerTabSelector Enabled="@_userStateController.ConnectedToGame" SelectedTab="@_selectedTab" TabNames="@_tabs" OnTabSelected="@SelectTab">
    <div class="resolver_div_tab resolver_style_alignright">
        <button @onclick="@LeaveGame" class="resolver_button_leave">X</button>
    </div>
</ContainerTabSelector>

<ContainerTab Enabled="_userStateController.ConnectedToGame" TabIdentity="Data" TabSelection="@_selectedTab">
    <FormData></FormData>
</ContainerTab>

<ContainerTab Enabled="_userStateController.ConnectedToGame" TabIdentity="Dashboard" TabSelection="@_selectedTab">
    @if (_userStateController.PlayerName != null && _userStateController.GameState != null)
    {
<FormGameState></FormGameState>}
</ContainerTab>

<ContainerTab Enabled="_userStateController.ConnectedToGame" TabIdentity="AllUnits" TabSelection="@_selectedTab">
    @if (_userStateController.PlayerName != null && _userStateController.GameState != null)
    {
<ComponentGameState @key=@($"{_userStateController.PlayerName}_{_userStateController.GameState?.TimeStamp}") DisplayOwnUnits="true"></ComponentGameState>}
</ContainerTab>

<ContainerTab Enabled="_userStateController.ConnectedToGame" TabIdentity="DamageReports" TabSelection="@_selectedTab">
    @if (_userStateController.PlayerName != null && _userStateController.GameState != null)
    {
<FormDamageReports OnlyNewest="false"></FormDamageReports>}
</ContainerTab>

<ContainerTab Enabled="_userStateController.ConnectedToGame" TabIdentity="Options" TabSelection="@_selectedTab">
    @if (_userStateController.GameOptions != null && _userStateController.PlayerOptions != null)
    {
<FormOptions @key=@($"{_userStateController.PlayerName}_{_userStateController.PlayerOptions?.TimeStamp}_{_userStateController.GameOptions?.TimeStamp}")></FormOptions>}
</ContainerTab>

@code
{
    private FormServer _formServer;
    private readonly List<string> _tabs = new() { "Data", "Dashboard", "AllUnits", "DamageReports", "Options" };
    private string _selectedTab = "Dashboard";
    private string _errorMessage;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithAutomaticReconnect()
            .WithUrl(_navigationManager.ToAbsoluteUri("/ClientHub"))
            .Build();

        _hubConnection.On<byte[]>(EventNames.ConnectionResponse, async (connectionResponseData) =>
        {
            var connectionResponse = DataHelper.Unpack<ConnectionResponse>(connectionResponseData);

            // If we have disconnected from a game, clear damage reports and game options to make sure
            if (connectionResponse.GameId == null)
            {
                _userStateController.GameOptions = null;
                _userStateController.DamageReportCollection.Clear();
                _userStateController.NotifyDamageReportsChanged();
            }

            if (connectionResponse.IsConnected)
            {
                _resolverCommunicator.SetAuthenticationToken(connectionResponse.AuthenticationToken);
                _userStateController.ConnectedToServer = true;
                _userStateController.PlayerName = connectionResponse.PlayerId;
                await _localStorage.SetUserCredentials(new Credentials { Name = connectionResponse.PlayerId, Password = connectionResponse.PlayerPassword });
            }
            else
            {
                _resolverCommunicator.SetAuthenticationToken(Guid.Empty);
                _userStateController.ConnectedToServer = false;
                _userStateController.GameState = null;
                _userStateController.PlayerName = null;
                _userStateController.PlayerOptions = null;
                await _localStorage.RemoveUserCredentials();
            }

            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.DamageReports, damageReportData =>
        {
            _userStateController.DamageReportCollection.AddRange(DataHelper.Unpack<List<DamageReport>>(damageReportData));
            _userStateController.NotifyDamageReportsChanged();
        });

        _hubConnection.On<byte[]>(EventNames.ErrorMessage, errorMessage =>
        {
            _errorMessage = DataHelper.Unpack<string>(errorMessage);
            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.GameEntries, gameEntries =>
        {
            _userStateController.GameEntries = DataHelper.Unpack<List<GameEntry>>(gameEntries).ToDictionary(g => g.GetId(), g => g);
            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.GameOptions, gameOptionsData =>
        {
            _userStateController.GameOptions = DataHelper.Unpack<GameOptions>(gameOptionsData);
            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.GameState, gameStateData =>
        {
            _userStateController.GameState = DataHelper.Unpack<GameState>(gameStateData);
            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.PlayerOptions, playerOptionsData =>
        {
            _userStateController.PlayerOptions = DataHelper.Unpack<PlayerOptions>(playerOptionsData);
            StateHasChanged();
        });

        _hubConnection.On<byte[]>(EventNames.TargetNumbers, targetNumberUpdateData =>
        {
            _userStateController.RecordTargetNumberUpdates(DataHelper.Unpack<List<TargetNumberUpdate>>(targetNumberUpdateData));
            StateHasChanged();
        });

        _resolverCommunicator.SetHubConnection(_hubConnection);
        await _hubConnection.StartAsync();

        _userStateController.OnPlayerStateUpdated += UpdatePlayerState;
        _userStateController.OnGameOptionsUpdated += UpdateGameOptions;
        _userStateController.OnPlayerOptionsUpdated += UpdatePlayerOptions;
        _userStateController.OnDamageInstanceRequested += SendDamageInstance;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var (credentialsFound, credentials) = await _localStorage.GetUserCredentials();

            if (credentialsFound)
            {
                _formServer.Connect(credentials);
            }
        }
    }

    private void SendDamageInstance()
    {
        _resolverCommunicator.SendDamageInstance(_userStateController.DamageInstance);
    }

    private void UpdatePlayerState()
    {
        _resolverCommunicator.SendPlayerState(_userStateController.PlayerState);
    }

    private void UpdateGameOptions()
    {
        _resolverCommunicator.SendGameOptions(_userStateController.GameOptions);
    }

    private void UpdatePlayerOptions()
    {
        _resolverCommunicator.SendPlayerOptions(_userStateController.PlayerOptions);
    }

    private void SelectTab(string input)
    {
        _selectedTab = input;
    }

    private void LeaveGame()
    {
        _formServer.LeaveGame();
    }

    public void Dispose()
    {
        _userStateController.OnPlayerStateUpdated -= UpdatePlayerState;
        _userStateController.OnGameOptionsUpdated -= UpdateGameOptions;
        _userStateController.OnPlayerOptionsUpdated -= UpdatePlayerOptions;
        _userStateController.OnDamageInstanceRequested -= SendDamageInstance;
        _hubConnection?.DisposeAsync();
    }
}
