@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using Newtonsoft.Json
@inject CommonData _commonData
@inject VisualStyleController _visualStyleController
@inject UserStateController _userStateController

<div class="resolver_div_componentcontainer alternatingcolors" ondragover="event.preventDefault();">

    <div class="resolver_div_componentrow">
        <div class="resolver_div_unitid">
            <FormToggle Checked="@(!UnitEntry.StaticDataHidden)" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnStaticDataHiddenChanged">Editable</FormToggle>
            <button class="resolver_button" disabled="@_userStateController.PlayerState.IsReady" @onclick="MoveUp"><b>&uarr;</b></button>
            <button class="resolver_button" disabled="@_userStateController.PlayerState.IsReady" @onclick="MoveDown"><b>&darr;</b></button>
            <button class="resolver_button" disabled="@_userStateController.PlayerState.IsReady" style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)" @onclick="ShowModalLoad">Load</button>
            <button class="resolver_button" disabled="@_userStateController.PlayerState.IsReady" style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)" @onclick="ShowModalSave">Save</button>
            <button class="resolver_button resolver_button_delete" disabled="@_userStateController.PlayerState.IsReady" style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)" @onclick="ShowModalDelete">X</button>
        </div>
    </div>
    
    <div class="resolver_div_unitname resolver_div_componentrow draggable mobile" draggable="true" @ondrag="@(()=> StartDrag(UnitEntry))" @ondrop="@(()=> Drop(UnitEntry))">
        @UnitEntry.Name
    </div>

    <div class="resolver_div_componentrow">

        <div class="resolver_div_unitname resolver_div_componentcell draggable desktop" draggable="true" @ondrag="@(()=> StartDrag(UnitEntry))" @ondrop="@(()=> Drop(UnitEntry))">
            @for (int ii = 0; ii < UnitEntry.Name.Length; ii++)
            {
                @UnitEntry.Name[ii]
                if (ii != UnitEntry.Name.Length - 1)
                {
                    <br />
                }
            }
        </div>
        
        <div class="resolver_div_unit resolver_div_componentcell" style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)">
            <table>
                <tr>
                    <td>Name</td>
                    <td>
                        <FormText SelectedOption="@UnitEntry.Name" OnChanged="@OnNameChanged" InvalidOptionGenerator="@GenerateInvalidNameList" Disabled="@_userStateController.PlayerState.IsReady"></FormText>
                    </td>
                </tr>
                <tr>
                    <td>Gunnery</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsSkills" SelectedOption="@UnitEntry.Gunnery" Min="0" Max="8" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnGunneryChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr>
                    <td>Piloting</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsSkills" SelectedOption="@UnitEntry.Piloting" Min="0" Max="8" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnPilotingChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr>
                    <td>Type</td>
                    <td>
                        <FormSelect Options="@_commonData.DictionaryUnitType" SelectedOption="@UnitEntry.Type" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(UnitType unitType) => OnUnitTypeChanged(unitType)"></FormSelect>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetTonnageHidden(UnitEntry.Type)))">
                    <td>Tonnage</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsTonnage" SelectedOption="@UnitEntry.Tonnage" Min="0" Max="100" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnTonnageChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetSpeedHidden(UnitEntry.Type)))">
                    <td>Speed</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsSpeed" SelectedOption="@UnitEntry.Speed" Min="0" Max="12" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnSpeedChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetJumpJetsHidden(UnitEntry.Type)))">
                    <td>Jump Jets</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsJumpJets" SelectedOption="@UnitEntry.JumpJets" Min="0" Max="12" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnJumpJetsChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr>
                    <td>Features <button class="resolver_button resolver_button_add" disabled="@_userStateController.PlayerState.IsReady" @onclick="() => _formPickSetFeatures.ShowAddDialog()">+</button></td>
                    <td>
                        <FormPickSet @ref="_formPickSetFeatures" Options="@_commonData.DictionaryFeature" ShowAddButton="@false" ContainedItems="@UnitEntry.Features" Editable="@(!UnitEntry.StaticDataHidden)" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(HashSet<UnitFeature> features) => OnFeaturesChanged(features)"></FormPickSet>
                    </td>
                </tr>
            </table>
        </div>

        <div class="resolver_div_unit resolver_div_componentcell">
            <table>
                <tr>
                    <th colspan="2">
                        Unit parameters
                    </th>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetTroopersHidden(UnitEntry.Type)))">
                    <td>Troopers</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsTroopers" SelectedOption="@UnitEntry.Troopers" Min="1" Max="30" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="@OnTroopersChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetSinksHidden(UnitEntry.Type)))">
                    <td>Sinks</td>
                    <td>
                        <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsSinks" SelectedOption="@UnitEntry.Sinks" Min="1" Max="100" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="@OnSinksChanged"></FormNumberPicker>
                    </td>
                </tr>
                <tr>
                    <td>Movement</td>
                    <td>
                        <FormRadio Options="@_commonData.FormMapMovementClass(UnitEntry)" SelectedOption="@UnitEntry.MovementClass" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="(MovementClass movementClass) => OnMovementClassChanged(movementClass)"></FormRadio>
                    </td>
                </tr>
                <tr>
                    <td>Hexes moved</td>
                    <td>
                        <FormRadio Options="@_commonData.FormMapMovementAmount(UnitEntry)" SelectedOption="@UnitEntry.Movement" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="(int movement) => OnMovementChanged(movement)"></FormRadio>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetStanceHidden(UnitEntry.Type)))">
                    <td>Stance</td>
                    <td>
                        <FormRadio Options="@_commonData.FormMapStance(UnitEntry.Type)" SelectedOption="@UnitEntry.Stance" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="(Stance stance) => OnStanceChanged(stance)"></FormRadio>
                    </td>
                </tr>
                <tr>
                    <td>
                        Status effects
                    </td>
                    <td>
                        <div>
                            <FormToggle @key=@($"narc_{UnitEntry.Id}_{UnitEntry.TimeStamp}") Checked="@UnitEntry.Narced" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="@OnNarcedChanged">Narced</FormToggle>
                            <FormToggle @key=@($"tag_{UnitEntry.Id}_{UnitEntry.TimeStamp}") Checked="@UnitEntry.Tagged" Disabled="@_userStateController.PlayerState.IsReady" ComparisonTimeStamp="@GetComparisonTime()" OnChanged="@OnTaggedChanged">Tagged</FormToggle>
                        </div>
                    </td>
                </tr>
            </table>

            @foreach(var weaponBay in UnitEntry.WeaponBays)
            {
                <FormFiringSolution @key="@weaponBay.Id" UnitEntry="@UnitEntry" WeaponBay="@weaponBay" OnChanged="@OnFiringSolutionChanged" />
            }
        </div>

        <div class="resolver_div_unit resolver_div_componentcell">
            <table style="@(VisualStyleController.HideElement(_visualStyleController.GetUnitStateHidden(UnitEntry.Type)))">
                <tr>
                    <td style="@(VisualStyleController.HideElement(_visualStyleController.GetSinksHidden(UnitEntry.Type)))">Heat</td>
                    <td style="@(VisualStyleController.HideElement(_visualStyleController.GetSinksHidden(UnitEntry.Type)))">
                        <FormNumberPickerDisplayOnly @key="@UnitEntry.Heat" BracketCreatorDelegate="@_commonData.FormPickBracketsSinks" StyleSelectorDelegate="@_visualStyleController.GetStyleForHeat" NumberToDisplay="@UnitEntry.Heat" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnHeatChanged"></FormNumberPickerDisplayOnly>
                    </td>
                    <td style="@(VisualStyleController.HideElement(_visualStyleController.GetPenaltyHidden(UnitEntry.Type)))">Penalty</td>
                    <td style="@(VisualStyleController.HideElement(_visualStyleController.GetPenaltyHidden(UnitEntry.Type)))">
                        <FormNumberPickerDisplayOnly @key="@UnitEntry.Penalty" BracketCreatorDelegate="@_commonData.FormPickBracketsPenalty" StyleSelectorDelegate="@_visualStyleController.GetStyleForPenalty" NumberToDisplay="@UnitEntry.Penalty" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnPenaltyChanged"></FormNumberPickerDisplayOnly>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(UnitEntry.GetHeatSpeedPenalty() == 0 || !UnitEntry.IsHeatTracking()))">
                    <td colspan="4">
                        <div class="resolver_div_attackerheat" style="@(VisualStyleController.HideElement(UnitEntry.GetHeatSpeedPenalty() == 0))">Movement penalty: <b>@($"{UnitEntry.GetHeatSpeedPenalty()}")</b></div>
                        <div class="resolver_div_attackerheat" style="@(VisualStyleController.HideElement(UnitEntry.GetHeatAttackPenalty() == 0))">Attack penalty: <b>@($"{UnitEntry.GetHeatAttackPenalty()}")</b></div>
                        <div class="resolver_div_attackerheat" style="@(VisualStyleController.HideElement(UnitEntry.GetHeatShutdownDifficulty() == 0))">Avoid shutdown: <b>@($"{UnitEntry.GetHeatShutdownDifficulty()}")</b>+</div>
                        <div class="resolver_div_attackerheat" style="@(VisualStyleController.HideElement(UnitEntry.GetHeatAmmoExplosionDifficulty() == 0))">Avoid ammo explosion: <b>@($"{UnitEntry.GetHeatAmmoExplosionDifficulty()}")</b>+</div>
                    </td>
                </tr>
            </table>
            <table>
                @foreach (var weaponBay in UnitEntry.WeaponBays)
                {
                    <FormWeaponBay @key="@weaponBay.Id" WeaponBay="@weaponBay" Unit="@UnitEntry" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnWeaponBayChanged" OnDeleted="@OnWeaponBayDeleted" OnSwap="@OnWeaponBaySwap" />
                }
                <tr>
                    <td colspan="5">
                        <span style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)">
                            <button class="resolver_button resolver_button_add" disabled="@_userStateController.PlayerState.IsReady" @onclick="AddWeaponBay">+</button>
                        </span>
                    </td>
                </tr>
            </table>
            <ComponentHeatAmmoEstimate Unit="@UnitEntry" />
        </div>
    </div>
</div>

@if (_showModalDelete)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" id="passwordModal" style="display:block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Delete Unit</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalClose">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                Really delete @UnitEntry.Name?
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@(_ => OnDeleted.InvokeAsync(UnitEntry))>Delete</button>
                <button type="button" class="resolver_button" @onclick="@ModalClose">Cancel</button>
            </div>
        </div>
    </div>
}

@if (_showModalSave)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" style="display:block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Save Unit</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalClose">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                Save unit @UnitEntry.Name to database?
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@ModalSave>Submit</button>
                <button type="button" class="resolver_button" @onclick="@ModalClose">Cancel</button>
            </div>
        </div>
    </div>
}

@if (_showModalLoad)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" style="display:block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Load Unit</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalClose">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                <FormComboBox Options="@_commonData.GetSavedUnitNames()" OnChanged="(string unitName) => OnLoadedUnitNameChanged(unitName)"></FormComboBox>
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@ModalLoad>Submit</button>
                <button type="button" class="resolver_button" @onclick="@ModalClose">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private FormPickSet<UnitFeature> _formPickSetFeatures;

    [Parameter]
    public UnitEntry UnitEntry { get; set; }

    [Parameter]
    public EventCallback<UnitEntry> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<UnitEntry> OnLoad { get; set; }

    [Parameter]
    public EventCallback<SwapTuple> OnSwap { get; set; }

    public void AddWeaponBay()
    {
        var weaponToAdd = UnitEntry.WeaponBays.LastOrDefault();

        if (weaponToAdd != null)
        {
            UnitEntry.WeaponBays.Add(weaponToAdd.Copy());
        }
        else
        {
            UnitEntry.WeaponBays.Add(CommonData.GetDefaultWeaponBay(UnitEntry.Type));
        }

        SendUpdate();
    }

    public DateTime GetComparisonTime()
    {
        return _userStateController.PlayerOptions.HighlightUnalteredFields ? _userStateController.GameState.TurnTimeStamp : DateTime.MinValue;
    }

    private void SendUpdate()
    {
        UnitEntry.TimeStamp = DateTime.UtcNow;
        _userStateController.NotifyPlayerDataUpdated();
    }

    private List<string> GenerateInvalidNameList()
    {
        return _userStateController.PlayerState.UnitEntries.Where(u => u.Id != UnitEntry.Id).Select(u => u.Name).ToList();
    }

    #region Property changing delegates

    private void OnNameChanged(string name)
    {
        if (UnitEntry.Name != name)
        {
            UnitEntry.Name = name;
            SendUpdate();
        }
    }

    private void OnGunneryChanged(int gunnery)
    {
        if (UnitEntry.Gunnery != gunnery)
        {
            UnitEntry.Gunnery = gunnery;
            SendUpdate();
        }
    }

    private void OnHeatChanged(int heat)
    {
        if (UnitEntry.Heat != heat)
        {
            UnitEntry.Heat = heat;
            SendUpdate();
        }
    }

    private void OnJumpJetsChanged(int jumpJets)
    {
        if (UnitEntry.JumpJets != jumpJets)
        {
            UnitEntry.JumpJets = jumpJets;
            SendUpdate();
        }
    }

    private void OnPenaltyChanged(int penalty)
    {
        if (UnitEntry.Penalty != penalty)
        {
            UnitEntry.Penalty = penalty;
            SendUpdate();
        }
    }

    private void OnPilotingChanged(int piloting)
    {
        if (UnitEntry.Piloting != piloting)
        {
            UnitEntry.Piloting = piloting;
            SendUpdate();
        }
    }

    private void OnFeaturesChanged(HashSet<UnitFeature> features)
    {
        UnitEntry.Features = features;
        SendUpdate();
    }

    private void OnSpeedChanged(int speed)
    {
        if (UnitEntry.Speed != speed)
        {
            UnitEntry.Speed = speed;
            SendUpdate();
        }
    }

    private void OnStaticDataHiddenChanged(bool staticDataHidden)
    {
        if (UnitEntry.StaticDataHidden != !staticDataHidden)
        {
            UnitEntry.StaticDataHidden = !staticDataHidden;
            SendUpdate();
        }
    }

    private void OnTonnageChanged(int tonnage)
    {
        if (UnitEntry.Tonnage != tonnage)
        {
            UnitEntry.Tonnage = tonnage;
            SendUpdate();
        }
    }

    private void OnTroopersChanged(int troopers)
    {
        if (UnitEntry.Troopers != troopers)
        {
            UnitEntry.Troopers = troopers;
            SendUpdate();
        }
    }

    private void OnSinksChanged(int sinks)
    {
        if (UnitEntry.Sinks != sinks)
        {
            // Automatically alter heat by a corresponding amount if number of sinks is changed.
            // The rationalization is that if the unit took damage last turn before sinking and the player adjusts
            // the number of sinks after turn resolution, the calculated value was made with too many sinks.
            UnitEntry.Heat += UnitEntry.Sinks - sinks;
            UnitEntry.Sinks = sinks;
            if (UnitEntry.Heat < 0)
            {
                UnitEntry.Heat = 0;
            }
            SendUpdate();
        }
    }

    private void OnUnitTypeChanged(UnitType unitType)
    {
        if (UnitEntry.Type != unitType)
        {
            UnitEntry.Type = unitType;
            SendUpdate();
        }
    }

    private void OnMovementClassChanged(MovementClass movementClass)
    {
        if (UnitEntry.MovementClass != movementClass)
        {
            UnitEntry.MovementClass = movementClass;
            SendUpdate();
        }
    }

    private void OnMovementChanged(int movement)
    {
        if (UnitEntry.Movement != movement)
        {
            UnitEntry.Movement = movement;
            SendUpdate();
        }
    }

    private void OnStanceChanged(Stance stance)
    {
        if (UnitEntry.Stance != stance)
        {
            UnitEntry.Stance = stance;
            SendUpdate();
        }
    }

    private void OnNarcedChanged(bool narced)
    {
        if (UnitEntry.Narced != narced)
        {
            UnitEntry.Narced = narced;
            SendUpdate();
        }
    }

    private void OnTaggedChanged(bool tagged)
    {
        if (UnitEntry.Tagged != tagged)
        {
            UnitEntry.Tagged = tagged;
            SendUpdate();
        }
    }

    private void OnFiringSolutionChanged(FiringSolution firingSolution)
    {
        SendUpdate();
    }

    private void OnWeaponBayChanged(WeaponBay weaponBay)
    {
        SendUpdate();
    }

    private void OnWeaponBayDeleted(WeaponBay weaponBay)
    {
        UnitEntry.WeaponBays.Remove(weaponBay);
        SendUpdate();
    }

    public void OnWeaponBaySwap(SwapTuple swapTuple)
    {
        if (swapTuple.From != swapTuple.To)
        {
            SwapWeaponBays(swapTuple.From, swapTuple.To);
        }
    }

    private void SwapWeaponBays(int ix1, int ix2)
    {
        (UnitEntry.WeaponBays[ix1], UnitEntry.WeaponBays[ix2]) = (UnitEntry.WeaponBays[ix2], UnitEntry.WeaponBays[ix1]);
        SendUpdate();
    }

    public void MoveUp()
    {
        var index = _userStateController.PlayerState.UnitEntries.IndexOf(UnitEntry);

        if (index >= 1)
        {
            OnSwap.InvokeAsync(new SwapTuple(index - 1, index));
        }
    }

    public void MoveDown()
    {
        var index = _userStateController.PlayerState.UnitEntries.IndexOf(UnitEntry);

        if (index < _userStateController.PlayerState.UnitEntries.Count - 1)
        {
            OnSwap.InvokeAsync(new SwapTuple(index, index + 1));
        }
    }

    #endregion

    #region dragdrop

    void StartDrag(UnitEntry unit)
    {
        _userStateController.DraggedUnitIndex = _userStateController.PlayerState.UnitEntries.IndexOf(unit);
    }

    void Drop(Unit unit)
    {
        if (unit != null)
        {
            var targetUnitIndex = _userStateController.PlayerState.UnitEntries.IndexOf(UnitEntry);
            OnSwap.InvokeAsync(new SwapTuple(_userStateController.DraggedUnitIndex, targetUnitIndex));
        }
    }

    #endregion

    #region modals

    private bool _showModalDelete = false;
    private bool _showModalLoad = false;
    private bool _showModalSave = false;
    private string _modalUnitName = string.Empty;

    private void ShowModalDelete()
    {
        _showModalDelete = true;
    }

    private void ShowModalLoad()
    {
        _showModalLoad = true;
    }

    private void ShowModalSave()
    {
        _showModalSave = true;
    }

    private void ModalClose()
    {
        _showModalDelete = false;
        _showModalLoad = false;
        _showModalSave = false;
    }

    private async Task ModalSave()
    {
        ModalClose();
        await _commonData.SaveUnit(UnitEntry);
    }

    private async Task ModalLoad()
    {
        ModalClose();
        UnitEntry.FromUnit(await _commonData.GetUnit(_modalUnitName));
        await OnLoad.InvokeAsync(UnitEntry);
    }

    private void OnLoadedUnitNameChanged(string unitName)
    {
        _modalUnitName = unitName;
    }

    #endregion
}
