@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Communication
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject LocalStorage _localStorage
@inject ResolverCommunicator _resolverCommunicator
@inject UserStateController _userStateController
@inject CommonData _commonData
@implements IDisposable

<div class="resolver_div_login">
    @if (!_userStateController.ConnectedToServer)
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Sign in
                </h3>

                <FormCredentials OnSubmit="@Connect">Player</FormCredentials>
            </div>
        </div>
    }
    else
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Manual connection
                </h3>

                <FormCredentials OnSubmit="@JoinGame">Game</FormCredentials>
            </div>

            <div class="resolver_div_componentcell resolver_div_alignright">
                <button class="resolver_button resolver_button_leave" @onclick="Disconnect">X</button>
            </div>
        </div>
        @if (!_userStateController.ConnectedToGame && _games != null)
        {
            <div class="resolver_div_componentrow">
                <h2 class="resolver_header">
                    Games with recent activity
                </h2>
                <FormGameList Games="@_recentGames" OnJoin="@OnGameJoinButtonPressed" OnRefresh="@RefreshGameList"></FormGameList>
            </div>

            @if (_otherGames.Count > 0)
            {
                <div class="resolver_div_componentrow">
                    <h2 class="resolver_header">
                        Other games
                    </h2>

                    <FormGameList Games="@_otherGames" OnJoin="@OnGameJoinButtonPressed" OnRefresh="@RefreshGameList"></FormGameList>
                </div>
            }
        }

    }
</div>

@if (_showModal)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" id="passwordModal" style="display: block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Password required</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalCancel">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                <label class="resolver_label_auth">
                    Password:
                    <input class="resolver_input resolver_input_text" type="text" @bind="_modalPassword" />
                </label>
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@(e => ModalCompleted(_modalPassword))>Submit</button>
                <button type="button" class="resolver_button" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
}

@code
{
    private bool _showModal = false;
    private string _modalName = string.Empty;
    private string _modalPassword = string.Empty;
    private List<GameEntry> _recentGames;
    private List<GameEntry> _otherGames;
    private List<GameEntry> _games;

    protected override async Task OnInitializedAsync()
    {
        await RefreshGameList();
        _userStateController.OnUnitListChange += StateHasChanged;

        await base.OnInitializedAsync();
    }

    private void Connect(Credentials credentials)
    {
        _resolverCommunicator.Connect(credentials);
    }

    private void Disconnect()
    {
        _resolverCommunicator.Disconnect();
    }

    private void JoinGame(Credentials credentials)
    {
        _userStateController.DamageReportCollection.Clear();
        _resolverCommunicator.JoinGame(credentials);
        //await _resolverCommunicator.GetGameOptions();

        //_modalName = credentials.Name;
        //ModalShow();
    }

    public void LeaveGame()
    {
        _resolverCommunicator.LeaveGame();
    }

    private async Task RefreshGameList()
    {
        _games = await _commonData.GetGameEntries();
        _recentGames = _games.Where(g => g.TimeStamp >= DateTime.UtcNow - TimeSpan.FromHours(1)).ToList();
        _otherGames = _games.Where(g => g.TimeStamp < DateTime.UtcNow - TimeSpan.FromHours(1)).ToList();
    }

    private void OnGameJoinButtonPressed(string gameName)
    {
        JoinGame(new Credentials { Name = gameName, Password = string.Empty });
    }

    public void ModalShow()
    {
        _showModal = true;
    }

    private void ModalCancel() => _showModal = false;

    private void ModalCompleted(string password)
    {
        _showModal = false;
        JoinGame(new Credentials { Name = _modalName, Password = password });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*if (firstRender)
        {
            var (success, credentials) = await _localStorage.GetUserCredentials();

            if (success)
            {
                await Connect(credentials);
            }
        }*/

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        _userStateController.OnUnitListChange -= StateHasChanged;
    }
}