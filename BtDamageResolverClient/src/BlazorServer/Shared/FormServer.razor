@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Communication
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using System.Timers
@inject ResolverCommunicator _resolverCommunicator
@inject UserStateController _userStateController
@inject CommonData _commonData
@implements IDisposable

<div class="resolver_div_login">
    @if (!_userStateController.ConnectedToServer)
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Sign in
                </h3>

                <FormCredentials OnSubmit="@Connect">Player</FormCredentials>
            </div>
        </div>
    }
    else
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Manual connection
                </h3>

                <FormCredentials OnSubmit="@JoinGame">Game</FormCredentials>
            </div>

            <div class="resolver_div_componentcell resolver_style_alignright">
                <button class="resolver_button resolver_button_leave" @onclick="Disconnect">X</button>
            </div>
        </div>

        <div class="resolver_div_componentrow">
            <h2 class="resolver_header">
                Games with recent activity
            </h2>
            <FormGameList Games="@_userStateController.GameEntries.Values.ToList()" OnJoin="@OnGameJoinButtonPressed"></FormGameList>
        </div>
    }
</div>

@if (_showModal)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" id="passwordModal" style="display: block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Password required</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalCancel">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                <label class="resolver_label_auth">
                    Password:
                    <input class="resolver_input resolver_input_text" type="text" @bind="_modalPassword" />
                </label>
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@(e => ModalCompleted(_modalPassword))>Submit</button>
                <button type="button" class="resolver_button" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
}

@code
{
    private bool _showModal = false;
    private string _modalName = string.Empty;
    private string _modalPassword = string.Empty;

    protected override void OnInitialized()
    {
        _userStateController.OnGameEntriesReceived += StateHasChanged;
        RefreshGameList();

        base.OnInitialized();
    }

    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        RefreshGameList();
    }

    public void Connect(Credentials credentials)
    {
        _resolverCommunicator.Connect(credentials);
    }

    private void Disconnect()
    {
        _resolverCommunicator.Disconnect();
    }

    private void JoinGame(Credentials credentials)
    {
        _resolverCommunicator.JoinGame(credentials);
    }

    public void LeaveGame()
    {
        _resolverCommunicator.LeaveGame();
    }

    private void RefreshGameList()
    {
        if (!_userStateController.ConnectedToGame)
        {
            var games = _commonData.GetGameEntries();

            _userStateController.GameEntries = games.ToDictionary(s => s.GetId(), s => s);

            StateHasChanged();
        }
    }

    private void OnGameJoinButtonPressed(string gameName)
    {
        if (_userStateController.GameEntries.TryGetValue(gameName, out var entry) && entry.PasswordProtected)
        {
            ModalShow();
        }
        else
        {
            JoinGame(new Credentials { Name = gameName, Password = string.Empty });
        }
    }

    public void ModalShow() => _showModal = true;

    private void ModalCancel() => _showModal = false;

    private void ModalCompleted(string password)
    {
        _showModal = false;
        JoinGame(new Credentials { Name = _modalName, Password = password });
    }

    public void Dispose()
    {
        _userStateController.OnGameEntriesReceived -= StateHasChanged;
    }
}