@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Communication
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using System.Timers
@inject LocalStorage _localStorage
@inject ResolverCommunicator _resolverCommunicator
@inject UserStateController _userStateController
@inject CommonData _commonData
@implements IDisposable

<div class="resolver_div_login">
    @if (!_userStateController.ConnectedToServer)
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Sign in
                </h3>

                <FormCredentials OnSubmit="@Connect">Player</FormCredentials>
            </div>
        </div>
    }
    else
    {
        <div class="resolver_div_componentrow">
            <div class="resolver_div_componentcell">
                <h3 class="resolver_header">
                    Manual connection
                </h3>

                <FormCredentials OnSubmit="@JoinGame">Game</FormCredentials>
            </div>

            <div class="resolver_div_componentcell resolver_div_alignright">
                <button class="resolver_button resolver_button_leave" @onclick="Disconnect">X</button>
            </div>
        </div>

        @if (!_userStateController.ConnectedToGame && _games != null)
        {
            <div class="resolver_div_componentrow">
                <h2 class="resolver_header">
                    Games with recent activity
                </h2>
                <FormGameList @key=@($"{_userStateController.PlayerName}_{_gameListTimeStamp}") Games="@_games.Values.ToList()" OnJoin="@OnGameJoinButtonPressed" OnRefresh="@RefreshGameList"></FormGameList>
            </div>
        }
    }
</div>

@if (_showModal)
{
    <div class="resolver_modal_background">
        <div class="resolver_modal" id="passwordModal" style="display: block" role="dialog">
            <!-- Modal Header -->
            <div class="resolver_modal_header resolver_header">
                <h4 class="resolver_modal_title">Password required</h4>
                <button type="button" class="button_modal_close" @onclick="@ModalCancel">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="resolver_modal_body">
                <label class="resolver_label_auth">
                    Password:
                    <input class="resolver_input resolver_input_text" type="text" @bind="_modalPassword" />
                </label>
            </div>

            <!-- Modal footer -->
            <div class="resolver_modal_footer">
                <button type="button" class="resolver_button" @onclick=@(e => ModalCompleted(_modalPassword))>Submit</button>
                <button type="button" class="resolver_button" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
}

@code
{
    private bool _showModal = false;
    private string _modalName = string.Empty;
    private string _modalPassword = string.Empty;
    private Dictionary<string, GameEntry> _games = new();
    private Timer _timer;
    private DateTime _gameListTimeStamp;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer();
            _timer.Interval = 10000;
            _timer.Elapsed += OnTimerInterval;
            _timer.AutoReset = true;
            _timer.Enabled = true;
        }

        /*if (firstRender)
        {
            var (success, credentials) = await _localStorage.GetUserCredentials();

            if (success)
            {
                Connect(credentials);
            }
        }*/

        base.OnAfterRender(firstRender);
    }

    protected override void OnInitialized()
    {
        RefreshGameList();

        base.OnInitialized();
    }

    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        RefreshGameList();
    }

    private void Connect(Credentials credentials)
    {
        _resolverCommunicator.Connect(credentials);
    }

    private void Disconnect()
    {
        _resolverCommunicator.Disconnect();
    }

    private void JoinGame(Credentials credentials)
    {
        _userStateController.DamageReportCollection.Clear();
        _resolverCommunicator.JoinGame(credentials);
    }

    public void LeaveGame()
    {
        _resolverCommunicator.LeaveGame();
    }

    private void RefreshGameList()
    {
        if (!_userStateController.ConnectedToGame)
        {
            var games = _commonData.GetGameEntries();
            _games.Clear();
            foreach (var game in games)
            {
                _games.Add(game.GetId(), game);
            }
            _gameListTimeStamp = DateTime.UtcNow;

            StateHasChanged();
        }
    }

    private void OnGameJoinButtonPressed(string gameName)
    {
        if (_games[gameName].PasswordProtected)
        {
            ModalShow();
        }
        else
        {
            JoinGame(new Credentials { Name = gameName, Password = string.Empty });
        }
    }

    public void ModalShow()
    {
        _showModal = true;
    }

    private void ModalCancel() => _showModal = false;

    private void ModalCompleted(string password)
    {
        _showModal = false;
        JoinGame(new Credentials { Name = _modalName, Password = password });
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Elapsed -= OnTimerInterval;
            _timer.Dispose();
        }
    }
}