@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Api.Events
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData CommonData
@inject VisualStyleController VisualStyleController
@inject UserStateController UserStateController

<div class="resolver_div_componentcontainer">
    
    <h3 class="resolver_header">
        Generate damage
    </h3>

    <div class="resolver_div_unit">
        <table>
            <tr>
                <td>Target</td>
                <td>
                    <FormComboBox Options="@UserStateController.GetUnitIds()" SelectedOption="@_targetUnit" Disabled="@UserStateController.PlayerState.IsReady" OnChanged="(Guid unitId) => OnTargetChanged(unitId)"></FormComboBox>
                </td>
            </tr>
            <tr>
                <td>Damage</td>
                <td>
                    <FormNumber SelectedOption="@_damage" Min="0" Max="1000" Disabled="@UserStateController.PlayerState.IsReady" OnChanged="@OnDamageChanged"></FormNumber>
                </td>
            </tr>
            <tr>
                <td>Clustering</td>
                <td>
                    <FormRadio Options="@_clusterSizeList" SelectedOption="@_clusterSize" Disabled="@UserStateController.PlayerState.IsReady" OnChanged="(int clusterSize) => OnClusterSizeChanged(clusterSize)"></FormRadio>
                </td>
            </tr>
            <tr style="@(VisualStyleController.HideElement(VisualStyleController.GetDirectionHidden(UserStateController.GetUnitType(_targetUnit))))">
                <td>Direction</td>
                <td>
                    <FormRadio Options="@CommonData.MapFacing" SelectedOption="@_direction" Disabled="@UserStateController.PlayerState.IsReady" OnChanged="(Direction direction) => OnDirectionChanged(direction)"></FormRadio>
                </td>
            </tr>
            <tr style="@(VisualStyleController.HideElement(VisualStyleController.GetCoverHidden(UserStateController.GetUnitType(_targetUnit))))">
                <td>Cover</td>
                <td>
                    <FormRadio Options="@CommonData.MapCover" SelectedOption="@_cover" Disabled="@UserStateController.PlayerState.IsReady" OnChanged="(Cover cover) => OnCoverChanged(cover)"></FormRadio>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                        <button class="resolver_button" disabled="@UserStateController.PlayerState.IsReady" @onclick="Execute">Execute</button>
                </td>
            </tr>
        </table>
    </div>
</div>

@code {
    private int _damage;
    private Guid _targetUnit = Guid.Empty;
    private int _clusterSize = 5;
    private Direction _direction = Direction.Front;
    private Cover _cover = Cover.None;
    private readonly Dictionary<string, int> _clusterSizeList = new Dictionary<string, int> { { "1", 1 }, { "2", 2 }, { "5", 5 } };

    [Parameter]
    public DamageRequest DamageRequest { get; set; }

    private void Execute()
    {
        var damageRequest = new DamageRequest
        {
            UnitId = _targetUnit,
            AttackType = AttackType.Normal,
            ClusterSize = _clusterSize,
            Cover = _cover,
            Damage = _damage,
            Direction = _direction,
            TimeStamp = DateTime.UtcNow
        };

        UserStateController.NotifyDamageRequestCreated(damageRequest);
    }

    protected override void OnInitialized()
    {
        if (DamageRequest != null)
        {
            _targetUnit = DamageRequest.UnitId;
            _clusterSize = DamageRequest.ClusterSize;
            _cover = DamageRequest.Cover;
            _damage = DamageRequest.Damage;
            _direction = DamageRequest.Direction;
        }
        base.OnInitialized();
    }

    #region Property changing delegates

    private void OnDamageChanged(int damage)
    {
        _damage = damage;
    }

    private void OnClusterSizeChanged(int clusterSize)
    {
        _clusterSize = clusterSize;
    }

    private void OnTargetChanged(Guid target)
    {
        _targetUnit = target;
    }

    private void OnDirectionChanged(Direction direction)
    {
        _direction = direction;
    }

    private void OnCoverChanged(Cover cover)
    {
        _cover = cover;
    }

    #endregion
}
