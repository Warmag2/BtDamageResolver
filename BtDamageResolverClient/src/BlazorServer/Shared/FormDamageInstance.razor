@inherits BaseFaemiyahComponent
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using Faemiyah.BtDamageResolver.Api.Entities
@inject CommonData _commonData
@inject VisualStyleController _visualStyleController
@inject UserStateController _userStateController
@implements IDisposable

@if (_userStateController.PlayerState != null)
{
    <div class="resolver_div_componentcontainer">

        <h3 class="resolver_header">
            Generate damage
        </h3>

        <div class="resolver_div_unit">
            <table>
                <tr>
                    <td>Target</td>
                    <td>
                        <FormComboBox Options="@_userStateController.GetUnitIds()" SelectedOption="@_targetUnit" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(Guid unitId) => OnTargetChanged(unitId)"></FormComboBox>
                    </td>
                </tr>
                <tr>
                    <td>Damage</td>
                    <td>
                        <FormNumber SelectedOption="@_damage" Min="0" Max="1000" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnDamageChanged"></FormNumber>
                    </td>
                </tr>
                <tr>
                    <td>Clustering</td>
                    <td>
                        <FormRadio Options="@_clusterSizeList" SelectedOption="@_clusterSize" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(int clusterSize) => OnClusterSizeChanged(clusterSize)"></FormRadio>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetDirectionHidden(_userStateController.GetUnitType(_targetUnit))))">
                    <td>Direction</td>
                    <td>
                        <FormRadio Options="@_commonData.MapFacing" SelectedOption="@_direction" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(Direction direction) => OnDirectionChanged(direction)"></FormRadio>
                    </td>
                </tr>
                <tr style="@(VisualStyleController.HideElement(_visualStyleController.GetCoverHidden(_userStateController.GetUnitType(_targetUnit))))">
                    <td>Cover</td>
                    <td>
                        <FormRadio Options="@_commonData.FormMapCover(_userStateController.GetUnitType(_targetUnit))" SelectedOption="@_cover" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="(Cover cover) => OnCoverChanged(cover)"></FormRadio>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <button class="resolver_button" disabled="@_userStateController.PlayerState.IsReady" @onclick="Execute">Execute</button>
                    </td>
                </tr>
            </table>
        </div>
    </div>
}

@code {
    private int _damage;
    private Guid _targetUnit = Guid.Empty;
    private int _clusterSize = 5;
    private Direction _direction = Direction.Front;
    private Cover _cover = Cover.None;
    private readonly Dictionary<string, int> _clusterSizeList = new Dictionary<string, int> { { "1", 1 }, { "2", 2 }, { "5", 5 } };

    [Parameter]
    public DamageInstance DamageInstance { get; set; }

    private void Execute()
    {
        var damageRequest = new DamageInstance
        {
            UnitId = _targetUnit,
            AttackType = AttackType.Normal,
            ClusterSize = _clusterSize,
            Cover = _cover,
            Damage = _damage,
            Direction = _direction,
            TimeStamp = DateTime.UtcNow
        };

        _userStateController.NotifyDamageInstanceCreated(damageRequest);
    }

    protected override void OnInitialized()
    {
        _userStateController.OnGameUnitListUpdated += InvokeStateChange;

        if (DamageInstance != null)
        {
            _targetUnit = DamageInstance.UnitId;
            _clusterSize = DamageInstance.ClusterSize;
            _cover = DamageInstance.Cover;
            _damage = DamageInstance.Damage;
            _direction = DamageInstance.Direction;
        }
    }

    private void OnDamageChanged(int damage)
    {
        _damage = damage;
    }

    private void OnClusterSizeChanged(int clusterSize)
    {
        _clusterSize = clusterSize;
    }

    private void OnTargetChanged(Guid target)
    {
        _targetUnit = target;
    }

    private void OnDirectionChanged(Direction direction)
    {
        _direction = direction;
    }

    private void OnCoverChanged(Cover cover)
    {
        _cover = cover;
    }

    public void Dispose()
    {
        _userStateController.OnGameUnitListUpdated -= InvokeStateChange;
    }
}
