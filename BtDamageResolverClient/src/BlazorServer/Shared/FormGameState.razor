@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject UserStateController _userStateController
@inject VisualStyleController _visualStyleController
@implements IDisposable

<ContainerAccordion Enabled="@_sectionEnabledYourUnits" Title="Units">
    <h2 class="resolver_header">
        @_userStateController.PlayerName @(_userStateController.IsConnectedToGame ? $" - {_userStateController.GameState.GameId} - Turn {_userStateController.GameState.Turn}" : string.Empty)
    </h2>
    <FormPlayerState @key=@($"{_userStateController?.PlayerName}_{_userStateController?.PlayerState?.TimeStamp}")></FormPlayerState>
</ContainerAccordion>


@if (_userStateController.GameState?.GameId != null)
{
    <ContainerAccordion Enabled="@_sectionEnabledDamageRequests" Title="Damage requests">
        <FormDamageInstance @key="@_userStateController.GameState.TimeStamp" DamageInstance=@_userStateController.DamageInstance></FormDamageInstance>
    </ContainerAccordion>

    <ContainerAccordion Enabled="@_sectionEnabledDamageReports" Title="Damage reports">
        <FormDamageReports OnlyNewest="true"></FormDamageReports>
    </ContainerAccordion>

    <ContainerAccordion Enabled="@_sectionEnabledTools" Title="Admin tools">
        <FormTools @key="@_userStateController.GameState.TimeStamp"></FormTools>
    </ContainerAccordion>
}

@code
{
    private bool _sectionEnabledTools;
    private bool _sectionEnabledYourUnits = true;
    private bool _sectionEnabledDamageReports;
    private bool _sectionEnabledDamageRequests;

    protected override void OnInitialized()
    {
        _sectionEnabledTools = _userStateController.PlayerOptions?.DashboardShowToolsByDefault ?? false;
        _sectionEnabledDamageReports = _userStateController.PlayerOptions?.DashboardShowDamageReportsByDefault ?? true;
        _sectionEnabledDamageRequests = _userStateController.PlayerOptions?.DashboardShowDamageRequestsByDefault ?? false;
        _userStateController.OnPlayerUnitListChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _userStateController.OnPlayerUnitListChanged -= StateHasChanged;
    }
}
