@inherits BaseFaemiyahComponent
@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject UserStateController _userStateController
@implements IDisposable

@if (_userStateController.IsConnectedToGame)
{
    <ContainerAccordion Enabled="@_sectionEnabledYourUnits" Title="Units">
        @if(_userStateController.PlayerState.IsSpectator)
        {
            <div class="resolver_div_hr">
                <button class="resolver_button resolver_button_ready" @onclick="Spectate">Stop spectating</button>
            </div>

            @foreach (var player in _userStateController.GameState.Players.Values.Where(p => !p.IsSpectator))
            {
                <ComponentPlayerState @key=@($"{player.PlayerId}_{player.TimeStamp}") PlayerId="@player.PlayerId" />
            }
        }
        else
        {
            <h2 class="resolver_header">
                @_userStateController.PlayerName @(_userStateController.IsConnectedToGame ? $" - {_userStateController.GameState?.GameId} - Turn {_userStateController.GameState?.Turn}" : string.Empty)
            </h2>

            <div class="resolver_div_componentlistcontainer">
                @foreach (var unitEntry in _userStateController.PlayerState.UnitEntries)
                {
                    <FormUnitEntry @key=@($"{unitEntry.Id}") UnitEntry=@unitEntry OnDeleted="@OnUnitDeleted" OnLoad="@OnUnitLoad" OnSwap="@OnUnitSwap"></FormUnitEntry>
                }
            </div>

            <div class="resolver_div_hr">
                <button class="resolver_button resolver_button_add" @onclick="AddUnit" disabled="@_userStateController.PlayerState.IsReady">+</button>
                <button class="resolver_button resolver_button_ready" @onclick="Ready">@(_userStateController.PlayerState.IsReady ? "UnReady" : "Ready")</button>
                <button class="resolver_button resolver_button_ready" @onclick="Spectate">Spectate</button>
            </div>

            <div id="resolver_tooltip_targetnumber" class="resolver_div_tooltip" display="none" style="position: absolute; display: none;"></div>
        }
    </ContainerAccordion>

    <ContainerAccordion Enabled="@_sectionEnabledDamageRequests" Title="Damage requests">
        <FormDamageInstance DamageInstance=@_userStateController.DamageInstance></FormDamageInstance>
    </ContainerAccordion>

    <ContainerAccordion Enabled="@_sectionEnabledDamageReports" Title="Damage reports">
        <FormDamageReports OnlyNewest="true"></FormDamageReports>
    </ContainerAccordion>

    <ContainerAccordion Enabled="@_sectionEnabledTools" Title="Admin tools">
        <FormTools @key="@_userStateController.GameState?.TimeStamp"></FormTools>
    </ContainerAccordion>
}

@code
{
    private bool _sectionEnabledTools;
    private bool _sectionEnabledYourUnits = true;
    private bool _sectionEnabledDamageReports;
    private bool _sectionEnabledDamageRequests;

    protected override void OnInitialized()
    {
        _sectionEnabledTools = _userStateController.PlayerOptions?.DashboardShowToolsByDefault ?? false;
        _sectionEnabledDamageReports = _userStateController.PlayerOptions?.DashboardShowDamageReportsByDefault ?? true;
        _sectionEnabledDamageRequests = _userStateController.PlayerOptions?.DashboardShowDamageRequestsByDefault ?? false;
        _userStateController.OnPlayerUnitListUpdated += InvokeStateChange;
    }

    private void AddUnit()
    {
        _userStateController.AddUnit();
    }

    public void Ready()
    {
        _userStateController.PlayerState.IsReady = !_userStateController.PlayerState.IsReady;
        _userStateController.NotifyPlayerDataUpdated();
    }

    public void Spectate()
    {
        _userStateController.PlayerState.IsSpectator = !_userStateController.PlayerState.IsSpectator;
        _userStateController.NotifyPlayerDataUpdated();
    }

    private void OnUnitDeleted(UnitEntry unit)
    {
        _userStateController.RemoveUnit(unit);
    }

    private void OnUnitLoad(UnitEntry unit)
    {
        // No need to do more.
        _userStateController.NotifyPlayerDataUpdated();
    }

    public void OnUnitSwap(SwapTuple swapTuple)
    {
        if (swapTuple.From != swapTuple.To)
        {
            SwapUnits(swapTuple.From, swapTuple.To);
        }
    }

    private void SwapUnits(int ix1, int ix2)
    {
        (_userStateController.PlayerState.UnitEntries[ix1], _userStateController.PlayerState.UnitEntries[ix2]) = (_userStateController.PlayerState.UnitEntries[ix2], _userStateController.PlayerState.UnitEntries[ix1]);
        _userStateController.NotifyPlayerDataUpdated();

        // Dragdrop always induces a ordering check
        _userStateController.NotifyPlayerUnitListUpdated();
    }

    public void Dispose()
    {
        _userStateController.OnPlayerUnitListUpdated -= InvokeStateChange;
    }
}
