@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData _commonData
@inject UserStateController _userStateController
@inject VisualStyleController _visualStyleController

@{
    var adminRights = false;

    if (_userStateController.PlayerState != null && _userStateController.GameState != null)
    {
        adminRights = _userStateController.PlayerState.PlayerId == _userStateController.GameState.AdminId;
    }
}

<div class="resolver_div_componentrow flexbox-column">
    
    <h2 class="resolver_header resolver_top_header">
        Player options
    </h2>
    
    @if (_userStateController.PlayerOptions != null)
    {
        <h3 class="resolver_header">
            Dashboard elements
        </h3>

        <div class="resolver_div_options">
            <FormToggle Checked="@_userStateController.PlayerOptions.ShowToolsOnMainScreenByDefault" OnChanged="@OnToolVisibilityChanged">Tools</FormToggle>
            <FormToggle Checked="@_userStateController.PlayerOptions.ShowDamageRequestGeneratorOnMainScreenByDefault" OnChanged="@OnDamageRequestVisibilityChanged">Damage requests</FormToggle>
            <FormToggle Checked="@_userStateController.PlayerOptions.ShowDamageReportsOnMainScreenByDefault" OnChanged="@OnDamageReportVisibilityChanged">Damage reports</FormToggle>
            <FormToggle Checked="@_userStateController.PlayerOptions.ShowOtherPlayersDamageReportsOnMainScreenByDefault" OnChanged="@OnOtherPlayerDamageReportVisibilityChanged">Other players' damage reports</FormToggle>
        </div>

        <h3 class="resolver_header">
            Damage report elements
        </h3>

        <div class="resolver_div_options">
            <FormToggle Checked="@_userStateController.PlayerOptions.ShowAttackLogByDefault" OnChanged="@OnAttackLogVisibilityChanged">Attack logs</FormToggle>
        </div>


        <h3 class="resolver_header">
            Attack log entries in the attack log
        </h3>

        <div class="resolver_div_options">
            @foreach (var attackLogEntryType in _userStateController.PlayerOptions.AttackLogEntryVisibility)
            {
                <FormCheckbox Checked="@attackLogEntryType.Value" OnChanged="@(e => OnAttackLogEntryVisibilityChanged(attackLogEntryType.Key, e))">@attackLogEntryType.Key</FormCheckbox>
            }
        </div>
    }
    else
    {
        <div class="resolver_div_options">
            No player options have been received from the server.
        </div>
    }
</div>

<div class="resolver_div_componentrow flexbox-column">

    <h2 class="resolver_header resolver_top_header">
        Game options
    </h2>

    @if (_userStateController.GameOptions != null)
    {
        <h3 class="resolver_header">
            General rules
        </h3>

        <div class="resolver_div_options">
            <FormToggle Checked="@_userStateController.GameOptions.Rules[Rule.FloatingCritical]" Disabled="@(!adminRights)" OnChanged="@OnRuleFloatingCriticalChanged">Floating critical rule</FormToggle>
        </div>


        <h3 class="resolver_header">
            Weather conditions
        </h3>

        <div class="resolver_div_options">
            <label class="resolver_div_options_label">Modifier to all weapon attacks</label>
            <FormRadio @key="@_userStateController.GameOptions.TimeStamp" Options="@_commonData.MapAttackModifier" SelectedOption="@_userStateController.GameOptions.PenaltyAll" Disabled="@(!adminRights)" OnChanged="(int penalty) => OnWeatherModifierChangedAll(penalty)"></FormRadio>
        </div>
        <div class="resolver_div_options">
            <label class="resolver_div_options_label">Modifier to Ballistic weapon attacks</label>
            <FormRadio @key="@_userStateController.GameOptions.TimeStamp" Options="@_commonData.MapAttackModifier" SelectedOption="@_userStateController.GameOptions.PenaltyBallistic" Disabled="@(!adminRights)" OnChanged="(int penalty) => OnWeatherModifierChangedBallistic(penalty)"></FormRadio>
        </div>
        <div class="resolver_div_options">
            <label class="resolver_div_options_label">Modifier to Energy weapon attacks</label>
            <FormRadio @key="@_userStateController.GameOptions.TimeStamp" Options="@_commonData.MapAttackModifier" SelectedOption="@_userStateController.GameOptions.PenaltyEnergy" Disabled="@(!adminRights)" OnChanged="(int penalty) => OnWeatherModifierChangedEnergy(penalty)"></FormRadio>
        </div>
        <div class="resolver_div_options">
            <label class="resolver_div_options_label">Modifier to Missile weapon attacks</label>
            <FormRadio @key="@_userStateController.GameOptions.TimeStamp" Options="@_commonData.MapAttackModifier" SelectedOption="@_userStateController.GameOptions.PenaltyMissile" Disabled="@(!adminRights)" OnChanged="(int penalty) => OnWeatherModifierChangedMissile(penalty)"></FormRadio>
        </div>
    }
    else
    {
        <div class="resolver_div_options">
            Not game options have been received from the server or not connected to a game.
        </div>
    }
</div>

@code {
    private void NotifyPlayerOptionsChanged()
    {
        _userStateController.NotifyPlayerOptionsChanged();
    }

    private void NotifyGameOptionsChanged()
    {
        _userStateController.NotifyGameOptionsChanged();
    }

    private void OnAttackLogVisibilityChanged(bool attackLogVisibility)
    {
        if (_userStateController.PlayerOptions.ShowAttackLogByDefault != attackLogVisibility)
        {
            _userStateController.PlayerOptions.ShowAttackLogByDefault = attackLogVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnToolVisibilityChanged(bool toolVisibility)
    {
        if (_userStateController.PlayerOptions.ShowToolsOnMainScreenByDefault != toolVisibility)
        {
            _userStateController.PlayerOptions.ShowToolsOnMainScreenByDefault = toolVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnDamageRequestVisibilityChanged(bool damageRequestVisibility)
    {
        if (_userStateController.PlayerOptions.ShowDamageRequestGeneratorOnMainScreenByDefault != damageRequestVisibility)
        {
            _userStateController.PlayerOptions.ShowDamageRequestGeneratorOnMainScreenByDefault = damageRequestVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnDamageReportVisibilityChanged(bool damageReportVisibility)
    {
        if (_userStateController.PlayerOptions.ShowDamageReportsOnMainScreenByDefault != damageReportVisibility)
        {
            _userStateController.PlayerOptions.ShowDamageReportsOnMainScreenByDefault = damageReportVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnOtherPlayerDamageReportVisibilityChanged(bool damageReportVisibility)
    {
        if (_userStateController.PlayerOptions.ShowOtherPlayersDamageReportsOnMainScreenByDefault != damageReportVisibility)
        {
            _userStateController.PlayerOptions.ShowOtherPlayersDamageReportsOnMainScreenByDefault = damageReportVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnAttackLogEntryVisibilityChanged(AttackLogEntryType attackLogEntryType, bool entryVisibility)
    {
        if (_userStateController.PlayerOptions.AttackLogEntryVisibility[attackLogEntryType] != entryVisibility)
        {
            _userStateController.PlayerOptions.AttackLogEntryVisibility[attackLogEntryType] = entryVisibility;
            NotifyPlayerOptionsChanged();
        }
    }

    private void OnRuleFloatingCriticalChanged(bool ruleFloatingCritical)
    {
        if (_userStateController.GameOptions.Rules[Rule.FloatingCritical] != ruleFloatingCritical)
        {
            _userStateController.GameOptions.Rules[Rule.FloatingCritical] = ruleFloatingCritical;
            NotifyGameOptionsChanged();
        }
    }

    private void OnWeatherModifierChangedAll(int modifier)
    {
        if (_userStateController.GameOptions.PenaltyAll != modifier)
        {
            _userStateController.GameOptions.PenaltyAll = modifier;
            NotifyGameOptionsChanged();
        }
    }

    private void OnWeatherModifierChangedBallistic(int modifier)
    {
        if (_userStateController.GameOptions.PenaltyBallistic != modifier)
        {
            _userStateController.GameOptions.PenaltyBallistic = modifier;
            NotifyGameOptionsChanged();
        }
    }

    private void OnWeatherModifierChangedEnergy(int modifier)
    {
        if (_userStateController.GameOptions.PenaltyEnergy != modifier)
        {
            _userStateController.GameOptions.PenaltyEnergy = modifier;
            NotifyGameOptionsChanged();
        }
    }

    private void OnWeatherModifierChangedMissile(int modifier)
    {
        if (_userStateController.GameOptions.PenaltyMissile != modifier)
        {
            _userStateController.GameOptions.PenaltyMissile = modifier;
            NotifyGameOptionsChanged();
        }
    }
}
