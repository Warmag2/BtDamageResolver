@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@using Newtonsoft.Json
@inject CommonData _commonData
@inject VisualStyleController _visualStyleController
@inject UserStateController _userStateController

<table>
    <tr style="@VisualStyleController.HideElement(UnitEntry.WeaponBays.Count <= 1)">
        <td colspan="5">
            @if (UnitEntry.StaticDataHidden)
            {
                <b>@WeaponBay.Name</b>
            }
            else
            {
                <FormText SelectedOption="@WeaponBay.Name" OnChanged="@OnNameChanged" Disabled="@_userStateController.PlayerState.IsReady"></FormText>
            }
        </td>
    </tr>
    @foreach (var weaponEntry in WeaponBay.Weapons)
    {
        <FormWeaponEntry @key="@weaponEntry.Id" WeaponEntry="@weaponEntry" Unit="@UnitEntry" Disabled="@_userStateController.PlayerState.IsReady" OnChanged="@OnWeaponChanged" OnDeleted="@OnWeaponDeleted" OnSwap="@OnWeaponSwap" />
    }
    <tr>
        <td colspan="5">
            <span style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)">
                <button class="resolver_button resolver_button_add" disabled="@_userStateController.PlayerState.IsReady" @onclick="AddWeapon">+</button>
            </span>
        </td>
    </tr>
</table>

@code {
    private FormPickSet<UnitFeature> _formPickSetFeatures;

    [Parameter]
    public UnitEntry UnitEntry { get; set; }

    [Parameter]
    public WeaponBay WeaponBay { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<WeaponBay> OnChanged { get; set; }

    [Parameter]
    public EventCallback<WeaponBay> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<SwapTuple> OnSwap { get; set; }

    public void AddWeapon()
    {
        var weaponToAdd = WeaponBay.Weapons.LastOrDefault();

        if (weaponToAdd != null)
        {
            WeaponBay.Weapons.Add(weaponToAdd.Copy());
        }
        else
        {
            WeaponBay.Weapons.Add(CommonData.GetDefaultWeapon(UnitEntry.Type));
        }

        OnChanged.InvokeAsync();
    }

    public DateTime GetComparisonTime()
    {
        return _userStateController.PlayerOptions.HighlightUnalteredFields ? _userStateController.GameState.TurnTimeStamp : DateTime.MinValue;
    }

    #region Property changing delegates

    private void OnNameChanged(string name)
    {
        if (WeaponBay.Name != name)
        {
            WeaponBay.Name = name;
            SendUpdate();
        }
    }

    private void OnWeaponChanged(WeaponEntry weaponEntry)
    {
        SendUpdate();
    }

    private void OnWeaponDeleted(WeaponEntry weaponEntry)
    {
        WeaponBay.Weapons.Remove(weaponEntry);
        SendUpdate();
    }

    public void OnWeaponSwap(SwapTuple swapTuple)
    {
        if (swapTuple.From != swapTuple.To)
        {
            SwapWeapons(swapTuple.From, swapTuple.To);
        }
    }

    private void SwapWeapons(int ix1, int ix2)
    {
        (WeaponBay.Weapons[ix1], WeaponBay.Weapons[ix2]) = (WeaponBay.Weapons[ix2], WeaponBay.Weapons[ix1]);
        SendUpdate();
    }

    #endregion

    #region dragdrop

    private void StartDrag(WeaponBay weaponBay)
    {
        _userStateController.DraggedWeaponBayIndex = UnitEntry.WeaponBays.IndexOf(weaponBay);
    }

    private void Drop(WeaponBay weaponBay)
    {
        if (weaponBay != null)
        {
            var targetUnitIndex = UnitEntry.WeaponBays.IndexOf(weaponBay);
            OnSwap.InvokeAsync(new SwapTuple(_userStateController.DraggedWeaponBayIndex, targetUnitIndex));
        }
    }

    #endregion

    private void SendUpdate()
    {
        UnitEntry.TimeStamp = DateTime.UtcNow;
        _userStateController.NotifyPlayerDataUpdated();
    }
}
