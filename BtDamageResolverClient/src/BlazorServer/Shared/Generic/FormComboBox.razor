@inherits BaseFaemiyahComponent
@typeparam TItem
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic

@{
    var invalidSelection = !Options.Values.Any(v => v.Equals(SelectedOption));
}

<input class="resolver_input resolver_input_text @(invalidSelection ? "error" : string.Empty) @(ComparisonTimeStamp > _updateTimeStamp ? "reminder" : string.Empty)" type="text" disabled="@Disabled" @bind="SelectedOptionInternal" @oninput="AdjustOptionList" @onfocus="ShowComboBoxItems" @onfocusout="CheckHideComboBoxItems" @onkeypress="@(e => CheckForClose(e))">

<div class="resolver_div_combobox" style="@VisualStyleController.HideElement(_comboBoxItemsHidden)">
    @foreach (var option in Options)
    {
        var optionToSelect = $"{option.Key}";
        var hide = !option.Key.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase);
        if (option.Key.Equals(SelectedOptionInternal))
        {
            <div class="resolver_div_comboboxitem active" style="@VisualStyleController.HideElement(hide)" @onmouseover="SuppressOutOfFocus" @onmouseout="UnSuppressOutOfFocus" @onclick="@(e => SelectOptionImmediate(optionToSelect))">@option.Key</div>
        }
        else
        {
            <div class="resolver_div_comboboxitem" style="@VisualStyleController.HideElement(hide)" @onmouseover="SuppressOutOfFocus" @onmouseout="UnSuppressOutOfFocus" @onclick="@(e => SelectOptionImmediate(optionToSelect))">@option.Key</div>
        }
    }
</div>

@code
{
    private string _selectedOption = string.Empty;
    private string _searchString = string.Empty;
    private bool _comboBoxItemsHidden = true;
    private bool _suppressOutOfFocus;
    private DateTime _updateTimeStamp = DateTime.MinValue;

    [Parameter]
    public SortedDictionary<string, TItem> Options { get; set; }

    [Parameter]
    public TItem SelectedOption { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public DateTime ComparisonTimeStamp { get; set; }

    [Parameter]
    public EventCallback<TItem> OnChanged { get; set; }

    [Parameter]
    public EventCallback OnOutOfFocus { get; set; }

    public string SelectedOptionInternal
    {
        get => _selectedOption;
        set
        {
            if (CheckInputValidness(value))
            {
                _selectedOption = value;
                _updateTimeStamp = DateTime.UtcNow;
                OnChanged.InvokeAsync(Options[value]);
                InvokeStateChange();
            }
        }
    }

    private void AdjustOptionList(ChangeEventArgs changeEventArgs)
    {
        _searchString = (string)changeEventArgs.Value;

        // Get all options which match the search string exactly
        var optionsMatchingSearchString = Options.Where(o => o.Key.Equals(_searchString, StringComparison.InvariantCultureIgnoreCase)).ToList();

        // Check if the text matches an option exactly, even if it is not the only matching string
        if (optionsMatchingSearchString.Count == 1)
        {
            SelectedOptionInternal = optionsMatchingSearchString.First().Key;
        }
        else
        {
            SelectedOptionInternal = _searchString;
        }
    }

    private void SelectOptionImmediate(string option)
    {
        SelectedOptionInternal = option;
        _comboBoxItemsHidden = true;
        OnOutOfFocus.InvokeAsync();
    }

    private bool CheckInputValidness(string input)
    {
        if (input != null)
        {
            return Options.ContainsKey(input);
        }

        return false;
    }

    private void CheckForClose(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            HideComboBoxItems();
        }
    }

    private void ShowComboBoxItems()
    {
        if (!Disabled)
        {
            _comboBoxItemsHidden = false;
            _suppressOutOfFocus = false;
        }
    }

    private void HideComboBoxItems()
    {
        // Get all options which contain the search string
        var optionsContainingSearchString = Options.Where(o => o.Key.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)).ToList();

        // Check if only one match is possible, and select that immediately if this is the case
        if (optionsContainingSearchString.Count == 1)
        {
            SelectedOptionInternal = optionsContainingSearchString.First().Key;
        }
        else
        {
            // Get all options which match the search string exactly
            var optionsMatchingSearchString = optionsContainingSearchString.Where(o => o.Key.Equals(_searchString, StringComparison.InvariantCultureIgnoreCase)).ToList();

            // Check if the text matches an option exactly, even if it is not the only matching string
            if (optionsMatchingSearchString.Count == 1)
            {
                SelectedOptionInternal = optionsMatchingSearchString.First().Key;
            }
        }

        _comboBoxItemsHidden = true;
        OnOutOfFocus.InvokeAsync();
    }

    private void CheckHideComboBoxItems()
    {
        if (!_suppressOutOfFocus)
        {
            HideComboBoxItems();
        }
    }

    private void SuppressOutOfFocus()
    {
        _suppressOutOfFocus = true;
    }

    private void UnSuppressOutOfFocus()
    {
        _suppressOutOfFocus = false;
    }

    protected override void OnInitialized()
    {
        if (Options.Any(o => o.Value.Equals(SelectedOption)))
        {
            SelectedOptionInternal = Options.FirstOrDefault(o => o.Value.Equals(SelectedOption)).Key;
            _updateTimeStamp = DateTime.MinValue;
        }
    }
}