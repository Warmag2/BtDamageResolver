@typeparam TItem

@{
    var invalidSelection = !Options.Values.Any(v => v.Equals(SelectedOption));
}

@foreach (var option in Options)
{
    <label class="resolver_label_toggleradio">
        <input type="radio" checked="@SelectedOption.Equals(option.Value)" name="@_name" value="@option.Key" disabled="@Disabled" @onchange="SelectionChanged">
        <span class="resolver_span_toggleradio @(invalidSelection ? "error" : string.Empty) @(Disabled ? "disabled" : string.Empty) @(ComparisonTimeStamp > _updateTimeStamp ? "reminder" : "")" @onclick="UpdateTimestamp">@option.Key</span>
    </label>
}

@code
{
    // Radio buttons do not work in HTML unless all options share a name. We generate one here.
    private readonly string _name = $"radio{Guid.NewGuid().ToString().Replace("-", "")}";
    private DateTime _updateTimeStamp = DateTime.MinValue;

    [Parameter]
    public Dictionary<string, TItem> Options { get; set; }

    [Parameter]
    public TItem SelectedOption { get; set; }

    [Parameter]
    public DateTime ComparisonTimeStamp { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<TItem> OnChanged { get; set; }

    void SelectionChanged(ChangeEventArgs args)
    {
        UpdateTimestamp();
        if (Options.TryGetValue(args.Value as string ?? throw new InvalidOperationException("Unknown type of item found from radio value. Expected string."), out var item))
        {
            OnChanged.InvokeAsync(item);
        }
    }

    private void UpdateTimestamp()
    {
        _updateTimeStamp = DateTime.UtcNow;
    }
}