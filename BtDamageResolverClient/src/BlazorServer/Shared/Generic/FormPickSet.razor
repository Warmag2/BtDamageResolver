@typeparam TItem

@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject VisualStyleController VisualStyleController

<div>
    @if (_displayAddDialog && Editable)
    {
        <FormComboBox Options="@_sortedOptionsNameDict" SelectedOption="@string.Empty" Disabled="@Disabled" ComparisonTimeStamp="@ComparisonTimeStamp" OnChanged="(string item) => AddEntry(item)" OnOutOfFocus="@HideAddDialog"></FormComboBox>
        <button class="resolver_button resolver_button_delete" disabled="@Disabled" @onclick="@HideAddDialog">X</button>
    }
    else if(ShowAddButton)
    {
        <button class="resolver_button resolver_button_insert" disabled="@Disabled" @onclick="@ShowAddDialog">+</button>
    }
</div>

<div class="resolver_div_componentcell">
    @foreach (var item in _containedItemNames)
    {
        <div class="resolver_div_unitinformation_data @(ComparisonTimeStamp > _updateTimeStamp ? "reminder" : "")">
            @item
            <button class="resolver_button resolver_button_delete" style="@(VisualStyleController.HideElement(!Editable))" disabled="@Disabled" @onclick="() => DeleteEntry(item)">X</button>
        </div>
        <br />
    }
</div>

@code
{
    private DateTime _updateTimeStamp = DateTime.MinValue;
    private HashSet<string> _containedItemNames;
    private bool _displayAddDialog = false;
    private SortedDictionary<string, string> _sortedOptionsNameDict;

    [Parameter]
    public SortedDictionary<string, TItem> Options { get; set; }

    [Parameter]
    public DateTime ComparisonTimeStamp { get; set; }

    [Parameter]
    public HashSet<TItem> ContainedItems { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Editable { get; set; }

    [Parameter]
    public bool ShowAddButton { get; set; }

    [Parameter]
    public EventCallback<HashSet<TItem>> OnChanged { get; set; }

    private void AddEntry(string item)
    {
        if (!_containedItemNames.Contains(item))
        {
            _containedItemNames.Add(item);
            OnChanged.InvokeAsync(ProduceOutputType());
            _updateTimeStamp = DateTime.Now;
        }
    }

    private void DeleteEntry(string item)
    {
        if (_containedItemNames.Contains(item))
        {
            _containedItemNames.Remove(item);
            OnChanged.InvokeAsync(ProduceOutputType());
            _updateTimeStamp = DateTime.Now;
        }
    }

    private HashSet<TItem> ProduceOutputType()
    {
        return Options.Where(c => _containedItemNames.Contains(c.Key)).Select(c => c.Value).ToHashSet();
    }

    public void HideAddDialog()
    {
        _displayAddDialog = false;
    }

    public void ShowAddDialog()
    {
        _displayAddDialog = true;
    }

    protected override void OnInitialized()
    {
        _sortedOptionsNameDict = new SortedDictionary<string, string>(Options.ToDictionary(o => o.Key, o => o.Key));
        _containedItemNames = Options.Where(o => ContainedItems.Contains(o.Value)).Select(o => o.Key).ToHashSet();
    }
}
