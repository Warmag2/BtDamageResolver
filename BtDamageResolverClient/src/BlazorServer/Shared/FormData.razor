@using Faemiyah.BtDamageResolver.Client.BlazorServer.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData _commonData

@{
    var sortedItemDict = new SortedDictionary<string, string>();
    _items.ForEach(i => sortedItemDict.Add(i, i));
}

<div class="resolver_div_componentlistcontainer">

    <div class="resolver_div_componentcontainer">
        <h3 class="resolver_header">
            Data Type
        </h3>

        <div class="resolver_div_componentrow">
            <FormSelect Options="@(Enum.GetValues(typeof(ResolverDataType)).Cast<ResolverDataType>().ToDictionary(n => n.ToString()))" SelectedOption=@_selectedDataType OnChanged="(ResolverDataType dataType) => OnDataTypeChanged(dataType)"></FormSelect>
        </div>

        @if (_items.Count > 0)
        {
            <h3 class="resolver_header">
                Data Entry
            </h3>

            <div class="resolver_div_componentrow">
                <FormComboBox @key="@_entryName" Options="@sortedItemDict" SelectedOption=@_entryName OnChanged="(string entryName) => OnEntityChanged(entryName)"></FormComboBox>
            </div>
            
            @if (_selectedDataType == ResolverDataType.Weapon)
            {
                <div class="resolver_div_componentrow">
                    <FormComboBox @key="@_entryName" Options="@_commonData.FormMapWeaponAmmo(_entryName)" SelectedOption=@_commonData.GetWeaponDefaultAmmo(_entryName) OnChanged="(string ammoName) => OnAmmoChanged(ammoName)"></FormComboBox>
                </div>
            }
            
            @switch (_selectedDataType)
            {
                case ResolverDataType.ClusterTable:
                    <FormDataDisplayClusterTable @key=@_entryName ClusterTableName=@_entryName></FormDataDisplayClusterTable>
                    break;
                case ResolverDataType.CriticalDamageTable:
                    <FormDataDisplayCriticalDamageTable @key=@_entryName CriticalDamageTableName=@_entryName></FormDataDisplayCriticalDamageTable>
                    break;
                case ResolverDataType.PaperDoll:
                    <FormDataDisplayPaperDoll @key=@_entryName PaperDollName=@_entryName></FormDataDisplayPaperDoll>
                    break;
                case ResolverDataType.Unit:
                    <FormDataDisplayUnit @key=@_entryName UnitName=@_entryName OnDelete=@OnUnitDeleted></FormDataDisplayUnit>
                    break;
                case ResolverDataType.Weapon:
                    <FormDataDisplayWeapon @key=@_entryName WeaponName=@_entryName Ammo=@_ammoName></FormDataDisplayWeapon>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    </div>
</div>

@code
{
    private ResolverDataType _selectedDataType = ResolverDataType.ClusterTable;
    private List<string> _items = new();
    private string _ammoName;
    private string _entryName;

    protected override void OnInitialized()
    {
        RefreshDataList();
    }

    private void RefreshDataList()
    {
        switch (_selectedDataType)
        {
            case ResolverDataType.ClusterTable:
                _items = _commonData.DictionaryClusterTable.Keys.ToList();
                break;
            case ResolverDataType.CriticalDamageTable:
                _items = _commonData.DictionaryCriticalDamageTable.Keys.ToList();
                break;
            case ResolverDataType.PaperDoll:
                _items = _commonData.DictionaryPaperDoll.Keys.ToList();
                break;
            case ResolverDataType.Unit:
                _items = _commonData.GetSavedUnitNames().Keys.ToList();
                break;
            case ResolverDataType.Weapon:
                _items = _commonData.DictionaryWeapon.Keys.ToList();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        _entryName = _items.FirstOrDefault();
    }

    private void OnAmmoChanged(string ammoName)
    {
        _ammoName = ammoName;
    }

    private void OnDataTypeChanged(ResolverDataType selectedDataType)
    {
        _selectedDataType = selectedDataType;
        RefreshDataList();
    }

    private void OnEntityChanged(string entryName)
    {
        _entryName = entryName;
    }

    private async Task OnUnitDeleted(string entryName)
    {
        await _commonData.DeleteUnit(entryName);
        RefreshDataList();
    }
}
