@inherits BaseFaemiyahComponent
@using Faemiyah.BtDamageResolver.Api.Enums;
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject UserStateController _userStateController
@implements IDisposable

@{
    var showOtherPlayers = _userStateController.PlayerOptions?.ShowOtherPlayersDamageReports ?? false;
    var showMovement = _userStateController.PlayerOptions?.ShowMovementDamageReports ?? false;
}

@if (_userStateController.DamageReportCollection.IsEmpty() || _userStateController.PlayerState == null)
{
    <h3>
        No damagereports available
    </h3>
}
else
{
    @if (OnlyNewest)
    {
        @foreach (var damageReport in _userStateController.DamageReportCollection.DamageReports.Last().Value)
        {
            if (_userStateController.PlayerState.IsSpectator || _userStateController.DamageReportConcernsPlayer(damageReport))
            {
                if (showMovement || damageReport.Phase != Phase.Movement)
                {
                    <div class="resolver_div_componentlistcontainer alternatingcolors">
                        <FormDamageReport DamageReport=@damageReport></FormDamageReport>
                    </div>
                }
            }
        }
    }
    else
    {
        @foreach (var singleTurnDamageReports in _userStateController.DamageReportCollection.DamageReports.Reverse())
        {
            <button class="resolver_button_accordion @VisualStyleController.GetActiveClass(_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))" @onclick="@(e => _userStateController.DamageReportCollection.ToggleVisible(singleTurnDamageReports.Key))"><div class="resolver_accordion_indicator active">-</div><div class="resolver_accordion_indicator inactive">+</div>Turn @singleTurnDamageReports.Key</button>
            <div class="resolver_div_accordioncontent @VisualStyleController.GetActiveClass(_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))" style="@VisualStyleController.HideElement(!_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))">
               @foreach (var damageReport in singleTurnDamageReports.Value)
               {
                   if (showOtherPlayers || _userStateController.DamageReportConcernsPlayer(damageReport))
                   {
                       if (showMovement || damageReport.Phase != Phase.Movement)
                       {
                           <div class="resolver_div_componentlistcontainer alternatingcolors">
                               <FormDamageReport DamageReport=@damageReport></FormDamageReport>
                           </div>
                       }
                   }
               }
            </div>
        }
    }
}

@code
{
    [Parameter]
    public bool OnlyNewest { get; set; }

    protected override void OnInitialized()
    {
        _userStateController.OnDamageReportsUpdated += InvokeStateChange;
        _userStateController.OnPlayerOptionsUpdated += InvokeStateChange;
    }

    public void Dispose()
    {
        _userStateController.OnDamageReportsUpdated -= InvokeStateChange;
        _userStateController.OnPlayerOptionsUpdated -= InvokeStateChange;
    }
}
