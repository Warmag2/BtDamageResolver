@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject UserStateController _userStateController
@inject VisualStyleController _visualStyleController
@implements IDisposable

@{
    var showOtherPlayers = _userStateController.PlayerOptions?.ShowOtherPlayersDamageReportsOnMainScreenByDefault ?? true;
}

@if (_userStateController.DamageReportCollection.IsEmpty())
{
    <h3>
        No damagereports available
    </h3>
}
else
{
    @if (OnlyNewest)
    {
        @foreach (var damageReport in _userStateController.DamageReportCollection.DamageReports.Last().Value)
        {
            if (showOtherPlayers || _userStateController.DamageReportConcernsPlayer(damageReport))
            {
                <div class="resolver_div_componentlistcontainer alternatingcolors">
                    <FormDamageReport DamageReport=@damageReport></FormDamageReport>
                </div>
            }
        }
    }
    else
    {
        @foreach (var singleTurnDamageReports in _userStateController.DamageReportCollection.DamageReports.Reverse())
        {
             <button class="resolver_button_accordion @_visualStyleController.GetActiveClass(_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))" @onclick="@(e => _userStateController.DamageReportCollection.ToggleVisible(singleTurnDamageReports.Key))"><div class="resolver_accordion_indicator active">-</div><div class="resolver_accordion_indicator inactive">+</div>Turn @singleTurnDamageReports.Key</button>
             <div class="resolver_div_accordioncontent @_visualStyleController.GetActiveClass(_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))" style="@VisualStyleController.HideElement(!_userStateController.DamageReportCollection.Visible(singleTurnDamageReports.Key))">
                 @foreach (var damageReport in singleTurnDamageReports.Value)
                 {
                     <div class="resolver_div_componentlistcontainer alternatingcolors">
                         <FormDamageReport DamageReport=@damageReport></FormDamageReport>
                     </div>
                 }
             </div>
        }
    }
}

<!-- This is here because we only want exactly one /-->
<div id="resolver_tooltip_paperdoll" class="resolver_div_tooltip" display="none" style="position: absolute; display: none;"></div>

@code
{
    [Parameter]
    public bool OnlyNewest { get; set; }
    
    protected override void OnInitialized()
    {
        _userStateController.OnDamageReportsUpdated += StateHasChanged;
    }

    public void Dispose()
    {
        _userStateController.OnDamageReportsUpdated -= StateHasChanged;
    }
}
