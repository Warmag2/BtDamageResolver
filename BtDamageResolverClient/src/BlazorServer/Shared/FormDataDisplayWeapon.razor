@using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData _commonData

@if (_weapon != null)
{
    <div class="resolver_div_componentrow">
        <table class="resolver_table">
            <tr>
                <th>Property</th>
                <th>Value</th>
            </tr>
            <tr>
                <td>Name</td>
                <td>@_weapon.Name</td>
            </tr>
            <tr>
                <td>Type</td>
                <td>@_weapon.Type</td>
            </tr>
            <tr>
                <td>Attack Type</td>
                <td>@_weapon.AttackType</td>
            </tr>
            <tr>
                <td>Range</td>
                <td>
                    @if(AllValuesAreEqual(_weapon.Range))
                    {
                        @($"All: {_weapon.Range.First().Value}")
                    }
                    else
                    {
                        foreach (var rangeBracket in _weapon.Range)
                        {
                            @($"{rangeBracket.Key}: {rangeBracket.Value}")
                            <br/>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>Range (Aerospace)</td>
                <td>@_weapon.RangeAerospace</td>
            </tr>
            <tr>
                <td>Range (Minimum)</td>
                <td>@_weapon.RangeMinimum</td>
            </tr>
            <tr>
                <td>Damage</td>
                <td>
                    @if(AllValuesAreEqual(_weapon.Damage))
                    {
                        @($"All: {_weapon.Damage.First().Value}")
                    }
                    else
                    {
                        foreach (var rangeBracket in _weapon.Damage)
                        {
                            @($"{rangeBracket.Key}: {rangeBracket.Value}")
                            <br/>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>Damage (Aerospace)</td>
                <td>
                    @if(AllValuesAreEqual(_weapon.DamageAerospace))
                    {
                        @($"All: {_weapon.DamageAerospace.First().Value}")
                    }
                    else
                    {
                        foreach (var rangeBracket in _weapon.DamageAerospace)
                        {
                            @($"{rangeBracket.Key}: {rangeBracket.Value}")
                            <br/>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>Heat</td>
                <td>@_weapon.Heat</td>
            </tr>
            <tr>
                <td>UsesAmmo</td>
                <td>@_weapon.UsesAmmo</td>
            </tr>
            <tr>
                <td>Hit modifiers</td>
                <td>@_weapon.HitModifier</td>
            </tr>
            <tr>
                <td>Cluster Size</td>
                <td>@_weapon.ClusterSize</td>
            </tr>
            <tr>
                <td>Cluster Damage</td>
                <td>@_weapon.ClusterDamage</td>
            </tr>
            <tr>
                <td>Cluster Bonus</td>
                <td>
                    @if(AllValuesAreEqual(_weapon.ClusterBonus))
                    {
                        @($"All: {_weapon.ClusterBonus.First().Value}")
                    }
                    else
                    {
                        foreach (var rangeBracket in _weapon.ClusterBonus)
                        {
                            @($"{rangeBracket.Key}: {rangeBracket.Value}")
                            <br/>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>Cluster Table</td>
                <td>@_weapon.ClusterTable</td>
            </tr>
            <tr>
                <td>Special Damage</td>
                <td>@($"{_weapon.SpecialDamage}")</td>
            </tr>
            <tr>
                <td>Special Features</td>
                <td>
                    @foreach (var entry in _weapon.SpecialFeatures)
                    {
                        @($"{entry}")
                        <br/>
                    }
                </td>
            </tr>
        </table>
    </div>
}

@code
{
    private Weapon _weapon;

    [Parameter]
    public string WeaponName { get; set; }

    [Parameter]
    public string Ammo { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(WeaponName) && _commonData.MapWeapon.ContainsKey(WeaponName))
        {
            _weapon = _commonData.FormWeapon(WeaponName, Ammo);
        }
    }

    private bool AllValuesAreEqual(Dictionary<RangeBracket, int> valueDict)
    {
        if (valueDict.Values.Distinct().Count() == 1)
        {
            return true;
        }

        return false;
    }
}
