@inherits BaseFaemiyahComponent
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData _commonData
@inject UserStateController _userStateController
@implements IDisposable

@{
    var targetNumberUpdate = _userStateController.GetTargetNumberUpdateSingleWeapon(UnitEntry.Id, WeaponEntry.Id);
    var calculationLog = GetTargetNumberText(targetNumberUpdate?.CalculationLog, false);
    var targetNumber = targetNumberUpdate?.TargetNumber <= 12 ? $"{targetNumberUpdate.TargetNumber}" : "N/A";
    var mapWeaponAmmo = _commonData.FormMapWeaponAmmo(WeaponEntry.WeaponName);
    
    if (WeaponEntry.Ammo == null || !mapWeaponAmmo.ContainsKey(WeaponEntry.Ammo))
    {
        WeaponEntry.Ammo = _commonData.GetWeaponDefaultAmmo(WeaponEntry.WeaponName);
    }
}

<tr class="resolver_tr_weaponentry draggable @(WeaponEntry.State == WeaponState.Active ? "active" : string.Empty)" draggable="true" @ondrag="@Drag" @ondrop="@Drop">
    <td class="resolver_td_targetnumber" onmousemove="ShowTooltip(event, 'resolver_tooltip_targetnumber', @calculationLog);" onmouseout="HideTooltip('resolver_tooltip_targetnumber');">
        <b>@(targetNumber)</b>
    </td>
    <td>
        <FormToggle Checked="@(WeaponEntry.State == WeaponState.Active)" Disabled="@Disabled" ComparisonTimeStamp="@(_userStateController.PlayerOptions.HighlightUnalteredFields ? _userStateController.GameState.TurnTimeStamp : DateTime.MinValue)" OnChanged="@OnWeaponStateChanged">@(WeaponEntry.State == WeaponState.Active ? "Active" : "Inactive")</FormToggle>
    </td>
    <td class="resolver_td_weaponentry" style="@VisualStyleController.HideElement(VisualStyleController.GetWeaponAmountHidden(UnitEntry.Type) && WeaponEntry.Amount == 1)">
        @if (UnitEntry.StaticDataHidden)
        {
            <b>@(WeaponEntry.Amount)x</b>
        }
        else
        {
            <FormNumberPickerDisplayOnly BracketCreatorDelegate="@CommonData.FormPickBracketsWeaponAmount" StyleSelectorDelegate="@((_) => "resolver_status_normal")" NumberToDisplay="@WeaponEntry.Amount" Disabled="@Disabled" OnChanged="(int amount) => OnWeaponAmountChanged(amount)" />
        }
    </td>
    <td class="resolver_td_weaponentry" style="@VisualStyleController.HideElement(VisualStyleController.GetWeaponModifierHidden(UnitEntry) && WeaponEntry.Modifier == 0)">
        @if (UnitEntry.StaticDataHidden)
        {
            <b>@($"{(WeaponEntry.Modifier >= 0 ? "+" : string.Empty)}{WeaponEntry.Modifier}")</b>
        }
        else
        {
            <FormNumberPickerDisplayOnly BracketCreatorDelegate="@CommonData.FormPickBracketsModifier" StyleSelectorDelegate="@((_) => "resolver_status_normal")" NumberToDisplay="@WeaponEntry.Modifier" DisplayNumberPrefix="true" Disabled="@Disabled" OnChanged="(int modifier) => OnWeaponModifierChanged(modifier)" />
        }
    </td>
    <td class="resolver_td_weaponentry">
        @if (UnitEntry.StaticDataHidden)
        {
            <b>@WeaponEntry.WeaponName</b>
        }
        else
        {
            <FormComboBox Options="@_commonData.FormMapWeaponName(UnitEntry.Type)" SelectedOption="@WeaponEntry.WeaponName" Disabled="@Disabled" OnChanged="(string weaponName) => OnWeaponNameChanged(weaponName)"></FormComboBox>
        }
    </td>
    <td>
        @if (_commonData.WeaponHasAmmo(WeaponEntry.WeaponName))
        {
            <FormSelect Options="@mapWeaponAmmo" SelectedOption="@WeaponEntry.Ammo" Disabled="@Disabled" OnChanged="(string ammoName) => OnWeaponAmmoChanged(ammoName)"></FormSelect>
        }
    </td>
    <td>
        <button class="resolver_button" disabled="@Disabled" @onclick="MoveUp"><b>&uarr;</b></button>
        <button class="resolver_button" disabled="@Disabled" @onclick="MoveDown"><b>&darr;</b></button>
    </td>
    <td style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)">
        <button class="resolver_button resolver_button_delete" disabled="@Disabled" @onclick="DeleteWeapon">X</button>
    </td>
</tr>

@code
{
    private string _weaponAmmo;
    private int _weaponAmount;
    private int _weaponModifier;
    private WeaponState _weaponState;
    private string _weaponName;

    [Parameter]
    public WeaponBay WeaponBay { get; set; }

    [Parameter]
    public WeaponEntry WeaponEntry { get; set; }

    [Parameter]
    public UnitEntry UnitEntry { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [Parameter]
    public EventCallback<WeaponEntry> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<int> OnDragWeapon { get; set; }

    [Parameter]
    public EventCallback<int> OnDropWeapon { get; set; }

    protected override void OnInitialized()
    {
        // Necessary to set this way, because otherwise disabling the controls may emit null or incorrect values upwards.
        _weaponAmmo = WeaponEntry.Ammo;
        _weaponAmount = WeaponEntry.Amount;
        _weaponState = WeaponEntry.State;
        _weaponName = WeaponEntry.WeaponName;
        _userStateController.OnTargetNumbersUpdated += InvokeStateChange;
    }

    private void DeleteWeapon()
    {
        OnDeleted.InvokeAsync(WeaponEntry);
    }

    private void UpdateWeaponEntry()
    {
        var anythingChanged = false;

        if (WeaponEntry.WeaponName != _weaponName)
        {
            WeaponEntry.WeaponName = _weaponName;
            anythingChanged = true;
        }
        if (WeaponEntry.Ammo != _weaponAmmo)
        {
            WeaponEntry.Ammo = _weaponAmmo;
            anythingChanged = true;
        }
        if (WeaponEntry.Amount != _weaponAmount)
        {
            WeaponEntry.Amount = _weaponAmount;
            anythingChanged = true;
        }
        if (WeaponEntry.Modifier != _weaponModifier)
        {
            WeaponEntry.Modifier = _weaponModifier;
            anythingChanged = true;
        }
        if (WeaponEntry.State != _weaponState)
        {
            WeaponEntry.State = _weaponState;
            anythingChanged = true;
        }

        if (anythingChanged)
        {
            WeaponEntry.TimeStamp = DateTime.UtcNow;
            OnChanged.InvokeAsync(WeaponEntry);
        }
    }

    private void OnWeaponAmmoChanged(string ammo)
    {
        _weaponAmmo = ammo;
        UpdateWeaponEntry();
    }

    private void OnWeaponAmountChanged(int amount)
    {
        _weaponAmount = amount;
        UpdateWeaponEntry();
    }

    private void OnWeaponModifierChanged(int modifier)
    {
        _weaponModifier = modifier;
        UpdateWeaponEntry();
    }

    private void OnWeaponNameChanged(string name)
    {
        _weaponName = name;
        UpdateWeaponEntry();
    }

    private void OnWeaponStateChanged(bool state)
    {
        _weaponState = state ? WeaponState.Active : WeaponState.Inactive;
        UpdateWeaponEntry();
    }

    public void MoveUp()
    {
        var index = WeaponBay.Weapons.IndexOf(WeaponEntry);

        if (index >= 1)
        {
            Swap(index - 1, index);
        }
    }

    public void MoveDown()
    {
        var index = WeaponBay.Weapons.IndexOf(WeaponEntry);

        if (index < WeaponBay.Weapons.Count - 1)
        {
            Swap(index, index + 1);
        }
    }

    private void Swap(int i1, int i2)
    {
        var swapTarget = WeaponBay.Weapons[i2];
        WeaponBay.Weapons[i2] = WeaponBay.Weapons[i1];
        WeaponBay.Weapons[i1] = swapTarget;

        OnChanged.InvokeAsync();
    }

    #region dragdrop

    private void Drag()
    {
        OnDragWeapon.InvokeAsync(WeaponBay.Weapons.IndexOf(WeaponEntry));
    }

    private void Drop()
    {
        OnDropWeapon.InvokeAsync(WeaponBay.Weapons.IndexOf(WeaponEntry));
    }

    #endregion

    private string GetTargetNumberText(AttackLog attackLog, bool showAllLines)
    {
        if (attackLog != null && attackLog.Log.Any())
        {
            return $"'{attackLog.Log.Where(entry => showAllLines || entry.Number != 0).Aggregate(string.Empty, (current, entry) => current + (entry + "<br>"))}'";
        }

        return "'No target number calculation log available.'";
    }

    public void Dispose()
    {
        _userStateController.OnTargetNumbersUpdated -= InvokeStateChange;
    }
}
