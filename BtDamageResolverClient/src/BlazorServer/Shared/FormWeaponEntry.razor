@inherits BaseFaemiyahComponent
@using Faemiyah.BtDamageResolver.Api.Enums
@using Faemiyah.BtDamageResolver.Api.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Entities
@using Faemiyah.BtDamageResolver.Client.BlazorServer.Logic
@inject CommonData _commonData
@inject VisualStyleController _visualStyleController
@inject UserStateController _userStateController
@implements IDisposable

@{
    var targetNumberUpdate = _userStateController.GetTargetNumberUpdateSingleWeapon(UnitEntry.Id, WeaponEntry.Id);
    var calculationLog = GetTargetNumberText(targetNumberUpdate?.CalculationLog, false);
    var targetNumber = targetNumberUpdate?.TargetNumber <= 12 ? $"{targetNumberUpdate.TargetNumber}" : "N/A";
    var mapWeaponAmmo = _commonData.FormMapWeaponAmmo(WeaponEntry.WeaponName);
    
    if(WeaponEntry.Ammo == null || !mapWeaponAmmo.ContainsKey(WeaponEntry.Ammo))
    {
        WeaponEntry.Ammo = _commonData.GetWeaponDefaultAmmo(WeaponEntry.WeaponName);
    }
}

<tr class="resolver_tr_weaponentry @(WeaponEntry.State == WeaponState.Active ? "active" : string.Empty)">
    <td class="resolver_td_targetnumber draggable" draggable="true" @ondrag="@StartDrag" @ondrop="@Drop" onmousemove="ShowTooltip(event, 'resolver_tooltip_targetnumber', @calculationLog);" onmouseout="HideTooltip('resolver_tooltip_targetnumber');">
        <b>@targetNumber</b>
    </td>
    <td>
        <FormToggle Checked="@(WeaponEntry.State == WeaponState.Active)" Disabled="@Disabled" ComparisonTimeStamp="@(_userStateController.PlayerOptions.HighlightUnalteredFields ? _userStateController.GameState.TurnTimeStamp : DateTime.MinValue)" OnChanged="@OnWeaponStateChanged">@(WeaponEntry.State == WeaponState.Active ? "Active" : "Inactive")</FormToggle>
    </td>
    <td>
        @if (UnitEntry.StaticDataHidden)
        {
            <b>@WeaponEntry.Amount</b>
        }
        else
        {
            <FormNumberPicker BracketCreatorDelegate="@_commonData.FormPickBracketsWeaponAmount" SelectedOption="@WeaponEntry.Amount" Min =1 Max=12 Disabled="@Disabled" OnChanged="(int amount) => OnWeaponAmountChanged(amount)" />
        }
    </td>
    <td class="resolver_td_weaponname">
        @if (UnitEntry.StaticDataHidden)
        {
            <b>@WeaponEntry.WeaponName</b>
        }
        else
        {
            <FormComboBox Options="@_commonData.FormMapWeaponName(UnitEntry.Type)" SelectedOption="@WeaponEntry.WeaponName" Disabled="@Disabled" OnChanged="(string weaponName) => OnWeaponNameChanged(weaponName)"></FormComboBox>
        }
    </td>
    <td>
        @if (_commonData.WeaponHasAmmo(WeaponEntry.WeaponName))
        {
            <FormComboBox Options="@mapWeaponAmmo" SelectedOption="@WeaponEntry.Ammo" Disabled="@Disabled" OnChanged="(string ammoName) => OnWeaponAmmoChanged(ammoName)"></FormComboBox>
        }
    </td>
    <td>
        <button class="resolver_button" disabled="@Disabled" @onclick="MoveUp"><b>&uarr;</b></button>
        <button class="resolver_button" disabled="@Disabled" @onclick="MoveDown"><b>&darr;</b></button>
    </td>
    <td style="@VisualStyleController.HideElement(UnitEntry.StaticDataHidden)">
        <button class="resolver_button resolver_button_delete" disabled="@Disabled" @onclick="DeleteWeapon">X</button>
    </td>
</tr>

@code
{
    private string _weaponAmmo;
    private int _weaponAmount;
    private WeaponState _weaponState;
    private string _weaponName;

    [Parameter]
    public WeaponBay WeaponBay { get; set; }

    [Parameter]
    public WeaponEntry WeaponEntry { get; set; }

    [Parameter]
    public UnitEntry UnitEntry { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [Parameter]
    public EventCallback<WeaponEntry> OnDeleted { get; set; }

    [Parameter]
    public EventCallback OnMove { get; set; }

    protected override void OnInitialized()
    {
        // Necessary to set this way, because otherwise disabling the controls may emit null or incorrect values upwards.
        _weaponAmmo = WeaponEntry.Ammo;
        _weaponAmount = WeaponEntry.Amount;
        _weaponState = WeaponEntry.State;
        _weaponName = WeaponEntry.WeaponName;
        _userStateController.OnTargetNumbersUpdated += InvokeStateChange;
    }

    private void DeleteWeapon()
    {
        OnDeleted.InvokeAsync(WeaponEntry);
    }

    private void UpdateWeaponEntry()
    {
        var anythingChanged = false;

        if (WeaponEntry.WeaponName != _weaponName)
        {
            WeaponEntry.WeaponName = _weaponName;
            anythingChanged = true;
        }
        if (WeaponEntry.Ammo != _weaponAmmo)
        {
            WeaponEntry.Ammo = _weaponAmmo;
            anythingChanged = true;
        }
        if (WeaponEntry.Amount != _weaponAmount)
        {
            WeaponEntry.Amount = _weaponAmount;
            anythingChanged = true;
        }
        if (WeaponEntry.State != _weaponState)
        {
            WeaponEntry.State = _weaponState;
            anythingChanged = true;
        }

        if (anythingChanged)
        {
            WeaponEntry.TimeStamp = DateTime.UtcNow;
            OnChanged.InvokeAsync(WeaponEntry);
        }
    }

    private void OnWeaponAmmoChanged(string ammo)
    {
        _weaponAmmo = ammo;
        UpdateWeaponEntry();
    }

    private void OnWeaponAmountChanged(int amount)
    {
        _weaponAmount = amount;
        UpdateWeaponEntry();
    }

    private void OnWeaponNameChanged(string name)
    {
        _weaponName = name;
        UpdateWeaponEntry();
    }

    private void OnWeaponStateChanged(bool state)
    {
        _weaponState = state ? WeaponState.Active : WeaponState.Inactive;
        UpdateWeaponEntry();
    }

    public void MoveUp()
    {
        var index = WeaponBay.Weapons.IndexOf(WeaponEntry);

        if (index >= 1)
        {
            Swap(index - 1, index);
        }
    }

    public void MoveDown()
    {
        var index = WeaponBay.Weapons.IndexOf(WeaponEntry);

        if (index < WeaponBay.Weapons.Count - 1)
        {
            Swap(index, index + 1);
        }
    }

    private void Swap(int i1, int i2)
    {
        var swapTarget = WeaponBay.Weapons[i2];
        WeaponBay.Weapons[i2] = WeaponBay.Weapons[i1];
        WeaponBay.Weapons[i1] = swapTarget;

        OnMove.InvokeAsync();
    }

    #region dragdrop

    void StartDrag()
    {
        _userStateController.DraggedUnitIndex = _userStateController.PlayerState.UnitEntries.IndexOf(UnitEntry);
        _userStateController.DraggedWeaponBayIndex = UnitEntry.WeaponBays.IndexOf(WeaponBay);
        _userStateController.DraggedWeaponIndex = WeaponBay.Weapons.IndexOf(WeaponEntry);
    }

    void Drop()
    {
        // Dragging weapon and hitting weapon, only valid situation
        if (_userStateController.DraggedUnitIndex.HasValue && _userStateController.DraggedWeaponBayIndex.HasValue && _userStateController.DraggedWeaponIndex.HasValue)
        {
            var targetUnitIndex = _userStateController.PlayerState.UnitEntries.IndexOf(UnitEntry);

            if (targetUnitIndex == _userStateController.DraggedUnitIndex)
            {
                // Get moved weapon
                var weaponToMove = UnitEntry.WeaponBays[_userStateController.DraggedWeaponBayIndex.Value].Weapons[_userStateController.DraggedWeaponIndex.Value];

                // Get target weapon index
                var targetWeaponIndex = WeaponBay.Weapons.IndexOf(WeaponEntry);

                // Insert copy of moved weapon to new place
                WeaponBay.Weapons.Insert(targetWeaponIndex, weaponToMove.Copy());

                // Remove moved weapon from original place
                UnitEntry.WeaponBays[_userStateController.DraggedWeaponBayIndex.Value].Weapons.Remove(weaponToMove);

                OnMove.InvokeAsync();
            }
        }

        // Clear drag information
        _userStateController.DraggedUnitIndex = null;
        _userStateController.DraggedWeaponBayIndex = null;
        _userStateController.DraggedWeaponIndex = null;
    }

    #endregion

    private string GetTargetNumberText(AttackLog attackLog, bool showAllLines)
    {
        if (attackLog != null && attackLog.Log.Any())
        {
            return $"'{attackLog.Log.Where(entry => showAllLines || entry.Number != 0).Aggregate(string.Empty, (current, entry) => current + (entry + "<br>"))}'";
        }

        return "'No target number calculation log available.'";
    }

    public void Dispose()
    {
        _userStateController.OnTargetNumbersUpdated -= InvokeStateChange;
    }
}
