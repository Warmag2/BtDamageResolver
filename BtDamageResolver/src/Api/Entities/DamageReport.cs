using System;
using System.Collections.Generic;
using Faemiyah.BtDamageResolver.Api.Enums;

namespace Faemiyah.BtDamageResolver.Api.Entities;

/// <summary>
/// The damage report.
/// </summary>
[Serializable]
public class DamageReport
{
    /// <summary>
    /// Initializes a new instance of the <see cref="DamageReport"/> class.
    /// </summary>
    public DamageReport()
    {
        Id = Guid.NewGuid();
        AmmoUsageAttacker = [];
        AmmoUsageDefender = [];
        AttackLog = new();
        TimeStamp = DateTime.UtcNow;
    }

    /// <summary>
    /// The ID of this damage report.
    /// </summary>
    public Guid Id { get; set; }

    /// <summary>
    /// The phase this damage report occurred in.
    /// </summary>
    public Phase Phase { get; set; }

    /// <summary>
    /// Troopers before attack event.
    /// </summary>
    public int InitialTroopers { get; set; }

    /// <summary>
    /// Firing unit ID.
    /// </summary>
    public Guid FiringUnitId { get; set; }

    /// <summary>
    /// Firing unit name.
    /// </summary>
    public string FiringUnitName { get; set; }

    /// <summary>
    /// Target unit ID.
    /// </summary>
    public Guid TargetUnitId { get; set; }

    /// <summary>
    /// Target unit name.
    /// </summary>
    public string TargetUnitName { get; set; }

    /// <summary>
    /// The ammo used by the attacker.
    /// </summary>
    public Dictionary<string, int> AmmoUsageAttacker { get; set; }

    /// <summary>
    /// The ammo used by the defender.
    /// </summary>
    public Dictionary<string, int> AmmoUsageDefender { get; set; }

    /// <summary>
    /// The heat generated by the attacker.
    /// </summary>
    public int AttackerHeat { get; set; }

    /// <summary>
    /// The game turn for this damage report.
    /// </summary>
    public int Turn { get; set; }

    /// <summary>
    /// The attack log.
    /// </summary>
    public AttackLog AttackLog { get; set; }

    /// <summary>
    /// The damage paper doll.
    /// </summary>
    public DamagePaperDoll DamagePaperDoll { get; set; }

    /// <summary>
    /// The update timestamp.
    /// </summary>
    public DateTime TimeStamp { get; set; }

    /// <summary>
    /// Append an attack log entry to the attack log of this damage report.
    /// </summary>
    /// <param name="entry">The attack log entry to append.</param>
    public void Log(AttackLogEntry entry)
    {
        AttackLog.Append(entry);
    }

    /// <summary>
    /// Merge this damage report with another damage report.
    /// </summary>
    /// <param name="damageReport">The damage report to merge with.</param>
    /// <exception cref="InvalidOperationException">Thrown when the damage report does not match the merged damage report.</exception>
    public void Merge(DamageReport damageReport)
    {
        if (damageReport == null)
        {
            return;
        }

        if (FiringUnitId != damageReport.FiringUnitId || TargetUnitId != damageReport.TargetUnitId)
        {
            throw new InvalidOperationException("Firing and target units do not match. Trying to merge damage reports from different fire events.");
        }

        AttackLog.Append(damageReport.AttackLog);

        AttackerHeat += damageReport.AttackerHeat;

        foreach (var ammoUsageItem in damageReport.AmmoUsageAttacker)
        {
            SpendAmmoAttacker(ammoUsageItem.Key, ammoUsageItem.Value);
        }

        foreach (var ammoUsageItem in damageReport.AmmoUsageDefender)
        {
            SpendAmmoDefender(ammoUsageItem.Key, ammoUsageItem.Value);
        }

        DamagePaperDoll.Merge(damageReport.DamagePaperDoll);
    }

    /// <summary>
    /// Spend attacker ammo.
    /// </summary>
    /// <param name="ammoType">The ammo type to spend.</param>
    /// <param name="ammoAmount">The amount to spend.</param>
    public void SpendAmmoAttacker(string ammoType, int ammoAmount)
    {
        SpendAmmo(true, ammoType, ammoAmount);
    }

    /// <summary>
    /// Spend defender ammo.
    /// </summary>
    /// <param name="ammoType">The ammo type to spend.</param>
    /// <param name="ammoAmount">The amount to spend.</param>
    public void SpendAmmoDefender(string ammoType, int ammoAmount)
    {
        SpendAmmo(false, ammoType, ammoAmount);
    }

    private void SpendAmmo(bool attacker, string ammoType, int ammoAmount)
    {
        var ammoDict = attacker ? AmmoUsageAttacker : AmmoUsageDefender;

        if (ammoDict.TryGetValue(ammoType, out var existingValue))
        {
            ammoDict[ammoType] = existingValue + ammoAmount;
        }
        else
        {
            ammoDict.Add(ammoType, ammoAmount);
        }
    }
}