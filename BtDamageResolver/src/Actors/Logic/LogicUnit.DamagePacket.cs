using Faemiyah.BtDamageResolver.Actors.Logic.Entities;
using Faemiyah.BtDamageResolver.Api.Entities;
using Faemiyah.BtDamageResolver.Api.Enums;
using Faemiyah.BtDamageResolver.Api.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Faemiyah.BtDamageResolver.Actors.Logic
{
    /// <summary>
    /// Partial class of unit logic which governs all application of damage packets to unit paper dolls.
    /// </summary>
    public partial class LogicUnit
    {
        /// <summary>
        /// Generate damage packets based on the attack and calculated damage.
        /// </summary>
        /// <param name="damageReport">The damage report to append to.</param>
        /// <param name="target">The target unit logic.</param>
        /// <param name="combatAction">The combat action.</param>
        /// <param name="damage">Total calculated and transformed damage.</param>
        /// <returns>A list of damage packets generated by the attack parameters.</returns>
        protected virtual List<DamagePacket> ResolveDamagePackets(DamageReport damageReport, ILogicUnit target, CombatAction combatAction, int damage)
        {
            // Heat weapons are cluster weapons for vulnerable unit types
            if (combatAction.Weapon.SpecialFeatures.HasFeature(WeaponFeature.Heat, out _))
            {
                if(!target.IsHeatTracking())
                {
                    damageReport.Log(new AttackLogEntry { Type = AttackLogEntryType.Information, Context = "Heat weapon acts as a cluster weapon against targeted unit" });
                    return Clusterize(combatAction.Weapon.ClusterSize, damage, combatAction.Weapon.SpecialDamage);
                }
            }

            if (combatAction.Weapon.SpecialFeatures.HasFeature(WeaponFeature.Cluster, out _))
            {
                return Clusterize(combatAction.Weapon.ClusterSize, damage, combatAction.Weapon.SpecialDamage);
            }

            if (combatAction.Weapon.SpecialFeatures.HasFeature(WeaponFeature.Rapid, out _))
            {
                // Rapid-fire weapons may already have dealt more damage than the individual instance, clusterize to units of the actual damage value
                return Clusterize(combatAction.Weapon.Damage[combatAction.RangeBracket], damage, combatAction.Weapon.SpecialDamage);
            }

            // Clustrerize to a single packet
            return Clusterize(damage, damage, combatAction.Weapon.SpecialDamage);
        }

        protected List<DamagePacket> Clusterize(int clusterSize, int totalDamage, SpecialDamageEntry specialDamage, bool onlyApplySpecialDamageOnce = true)
        {
            var damagePackets = new List<DamagePacket>();
            var first = true;

            while (totalDamage > 0)
            {
                var currentClusterSize = Math.Clamp(totalDamage, 1, clusterSize);

                // Typically we only the first cluster hit applies the special damage entry, if any, so clustering does not multiply any special damage
                var clusterSpecialDamageEntry = first && onlyApplySpecialDamageOnce
                    ? new List<SpecialDamageEntry> {
                        new SpecialDamageEntry
                        {
                            Data = MathExpression.Parse(specialDamage.Data).ToString(),
                            Type = specialDamage.Type
                        }
                    }
                    : new List<SpecialDamageEntry>
                    {
                        new SpecialDamageEntry()
                    };

                damagePackets.Add(new DamagePacket(currentClusterSize, clusterSpecialDamageEntry));
                totalDamage -= currentClusterSize;

                first = false;
            }

            return damagePackets;
        }
    }
}
