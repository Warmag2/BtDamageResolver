using System.Collections.Generic;
using System.Threading.Tasks;
using Faemiyah.BtDamageResolver.Api.Entities;
using Faemiyah.BtDamageResolver.Api.Entities.RepositoryEntities;
using Faemiyah.BtDamageResolver.Api.Enums;

namespace Faemiyah.BtDamageResolver.Actors.Logic.Interfaces
{
    public interface ILogicDamage
    {
        /// <summary>
        /// Resolves the total damage amount and number of damage entries generated by a weapon.
        /// </summary>
        /// <param name="damageReport">The damage report to log to.</param>
        /// <param name="marginOfSuccess">The margin of success of the fire event that produced the weapon hit.</param>
        /// <param name="firingUnit">The firing unit.</param>
        /// <param name="targetUnit">The target unit.</param>
        /// <param name="rangeBracket">The range bracket that the hit happens in.</param>
        /// <param name="weapon">The weapon used.</param>
        /// <param name="mode">The weapon mode in use.</param>
        /// <returns>The damage packets.</returns>
        Task<List<(int damage, List<SpecialDamageEntry> specialDamageEntries)>> ResolveDamageEntries(DamageReport damageReport, int marginOfSuccess, UnitEntry firingUnit, UnitEntry targetUnit, RangeBracket rangeBracket, Weapon weapon, WeaponMode mode);

        /// <summary>
        /// Resolves the damage packets from a damage request.
        /// </summary>
        /// <param name="damageInstance">The damage request to resolve.</param>
        /// <returns>The damage packets.</returns>
        List<(int damage, List<SpecialDamageEntry> specialDamageEntries)> ResolveDamageInstance(DamageInstance damageInstance);
    }
}